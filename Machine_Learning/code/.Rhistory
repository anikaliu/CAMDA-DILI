<<<<<<< HEAD
if (!require("BiocManager"))
install.packages("BiocManager")
BiocManager::install("maEndToEnd")
library("Biobase")
mydata<-read.csv("CompletelyRandomPeople.csv")
mydata<-read.csv("/Users/psrw2/OneDrive - University Of Cambridge/Statistics_4_Chemists/DA2 - Basic Data Analysis-20190114/CompletelyRandomPeople.csv")
mydata<-read.csv("CompletelyRandomPeople.csv")
mydata<-read.csv("/Users/psrw2/OneDrive - University Of Cambridge/Statistics_4_Chemists/DA2 - Basic Data Analysis-20190114/CompletelyRandomPeople.csv")
head(mydata)
names(mydata)
colnames(mydata)
rownames(mydata)
nrow(mydata)
ncol(mydata)
attributes(mydata)
summary(mydata)
chickwts <- read.csv("/Users/psrw2/OneDrive - University Of Cambridge/Statistics_4_Chemists/DA2-ChickenData.csv")
chickwts <- read.csv("/Users/psrw2/OneDrive - University Of Cambridge/Statistics_4_Chemists/DA2 - Basic Data Analysis-20190114/DA2-ChickenData.csv")
head(chickwts)
summary(chickwts)
?hist
weight<-chickwts$weight
hist(weight)
hist(weight, breaks=20)
hist(weight, breaks=c(100,175,200,250,300,325,450))
hist(weight, breaks=20, main=”My first histogram”,
xlab=”abscissa”, ylab=”ordinate”)
hist(weight, breaks=20, main=”My first histogram”,xlab=”abscissa”, ylab=”ordinate”)
hist(weight, breaks=20, main=”My first histogram”, xlab=”abscissa”, ylab=”ordinate”)
hist(weight, breaks=20, main='My first histogram', xlab=”abscissa”, ylab=”ordinate”)
hist(weight, breaks=20, main='My first histogram', xlab='abscissa', ylab='ordinate')
hist(weight, breaks=20, main='My first histogram', xlab='weight', ylab='frequency')
hist(weight, breaks=c(100,250,350,450), main='My first histogram', xlab='weight', ylab='frequency')
hist(weight, breaks=c(100,250,300,350,450), main='My first histogram', xlab='weight', ylab='frequency')
boxplot(weight)
boxplot(weight, main = 'Chicken Weights Boxplot')
halfweights<-weight/2
doubleweight<-weight*2
boxplot(weight,halfweight,doubleweight)
boxplot(weight,halfweights,doubleweight)
boxplot(weight,halfweights,doubleweight,names = (standard,half,double))
boxplot(weight,halfweights,doubleweight, names = c(standard,half,double))
boxplot(weight,halfweights,doubleweight, names = c('standard','half','double'))
boxplot(chickwts)
boxplot(weight~feed,data=chickwts)
head(swiss)
agriculture<-swiss$Agriculture
education<-swiss$Education
plot(education,agriculture)
plot(Agriculture~Education,data=swiss)
?plot
plot(Agriculture~Education,data=swiss, main=“Swiss Data”,xlab= “Proportion Educated Beyond Primary'', ylab='Proportion working in Agriculture', pch=19, col='blue', cex=0.75, type='b')
plot(Agriculture~Education,data=swiss, main='Swiss Data',xlab= 'Proportion Educated Beyond Primary', ylab='Proportion working in Agriculture', pch=19, col='blue', cex=0.75, type='b')
swiss[order(swiss$Agriculture),]
plot(Agriculture~Education,data=swiss, main='Swiss Data',xlab= 'Proportion Educated Beyond Primary', ylab='Proportion working in Agriculture', pch=19, col='blue', cex=0.75, type='b')
swiss<-swiss[order(swiss$Agriculture),]
plot(Agriculture~Education,data=swiss, main='Swiss Data',xlab= 'Proportion Educated Beyond Primary', ylab='Proportion working in Agriculture', pch=19, col='blue', cex=0.75, type='b')
View(swiss)
head(swiss)
plot(Agriculture~Education,data=swiss[order(swiss$Education),], main='Swiss Data',xlab= 'Proportion Educated Beyond Primary', ylab='Proportion working in Agriculture', pch=19, col='blue', cex=0.75, type='b')
mean(swiss$Agriculture)
mean(swiss)
var(swiss$Agriculture)
quantile(swiss$Agriculture)
range(swiss$Agriculture)
range(chickwts$weights)
range(chickwts$weight)
apply(swiss,2,quantile)
aggregate(weight~feed,data=chickwts,sd)
aggregate(weight~feed,data=chickwts,mean)
mydata<-read.csv("CompletelyRandomPeople.csv")
mydata<-read.csv("/Users/psrw2/OneDrive - University Of Cambridge/Statistics_4_Chemists/DA2 - Basic Data Analysis-20190114/DA2-ChickenData.csv")
boxplot(weight~feed,data=mydata)
hist(mydata$weight)
hist(mydata$weight, main='Chicken weight vs. Frequency',xlab='weight'
,ylab='Frequency')
print(mean(mydata$weight))
print(aggregate(weight~feed),data=mydata,mean)
head(mydata)
print(aggregate(weight~feed),data=mydata,mean)
print(aggregate(weight~feed,data=mydata,mean))
print(aggregate(call~stimulus,data=mydata,var))
head(mydata)
#
boxplot(interval~stimulus,data=mydata)
head(mydata)
rm(list=ls())
head(mydata)
#head(mydata)
#boxplot(interval~stimulus,data=mydata)
#plot(mydata$duration,mydata$call)
#hist(mydata$call, main='Mating Calls vs. Frequency',xlab='weight'
,ylab='Frequency')
mydata<-read.csv("/Users/psrw2/OneDrive - University Of Cambridge/Statistics_4_Chemists/DA2 - Basic Data Analysis-20190114/DA2-ChickenData.csv")
rm(mydata)
mydata<-read.csv("/Users/psrw2/OneDrive - University Of Cambridge/Statistics_4_Chemists/DA2 - Basic Data Analysis-20190114/Frog_Data.csv")
head(mydata)
boxplot(interval~stimulus,data=mydata)
plot(mydata$duration,mydata$call)
plot(mydata$duration,mydata$call, ylab='Freq Calls',xlab='Call Duration')
hist(mydata$call, main='Mating Calls vs. Frequency',xlab='Call'
,ylab='Frequency')
#head(mydata)
print(aggregate(call~stimulus,data=mydata,var))
print(mean(mydata$interval),mean(mydata$duration),mean(mydata$call))
print(mean(mydata$interval))
print(mean(mydata$call))
dotchart(mydata$duration)
pie(mydata$duration)
stripchart(mydata$duration)
barplot(mydata$duration)
boxplot(mydata$duration,mydata$call)
boxplot(mydata)
source("https://bioconductor.org/biocLite.R")
biocLite("simpleaffy")
library(simpleaffy)
.libPaths()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("simpleaffy", version = "3.8")
install.packages()
install.packages("affy")
install.packages("BoicLite")
BiocManager::install("affy")
BiocManager::install(c("GenomicFeatures", "AnnotationDbi"))
BiocManager::install("XML")
paste0(R.home(), "/library")
R.home()
.libPaths(paste0(R.home(), "/library"))
.libPaths()
BiocManager::install("XML")
.libPaths()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("xps", version = "3.8")
library(xps)
if (!requireNamespace("BiocManager", quietly = TRUE))
+     install.packages("BiocManager")
> BiocManager::install("xps", version = "3.8")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("xps", version = "3.8")
library(xps)
library(affy)
library("xps")
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
if (!requireNamespace("BiocManager"))
install.packages("BiocManager")
BiocManager::install()
setwd("~/OneDrive - University Of Cambridge/CasualR_Toxicogenomics/Renal_Toxicity")
load("/Users/psrw2/OneDrive - University Of Cambridge/CAMBA_Competition/Abdu_Plotting_Scripts_20_12_19/figures_script.RData")
Abdu <- load("/Users/psrw2/OneDrive - University Of Cambridge/CAMBA_Competition/Abdu_Plotting_Scripts_20_12_19/figures_script.RData")
setwd("~/OneDrive - University Of Cambridge/GitHub/CAMDA-DILI/Machine_Learning/code")
####Load librariers####
library(tidyverse)
library(ggplot2)
####Aggregate individual performance files####
cv_ECFP<-read.csv('../data/Model_Results_Parameters/ECFP/cv_scores_ECFP.csv')%>%
separate(splits, sep='\\.',
into=c('dataset', 'method', 'true_or_y_scrambled_labels_used','train_test_split','cv_split'))%>%
mutate('testset'='CV', 'descriptor'='ECFP')
ts_ECFP<-read.csv('../data/Model_Results_Parameters/ECFP/test_scores_ECFP.csv')%>%
separate(splits, sep='\\.',
into=c('dataset', 'method', 'true_or_y_scrambled_labels_used','train_test_split','cv_split'))%>%
mutate('testset'='External Test Set', 'descriptor'='ECFP')
ex_ECFP<-read.csv('../data/FDA_Validation_Set_Results/Predictions_ECFP4/ambiguous_results.csv')%>%
separate(splits, sep='\\.',
into=c('dataset', 'method', 'true_or_y_scrambled_labels_used','train_test_split','cv_split'))%>%
mutate('testset'='FDA Validation Set', 'descriptor'='ECFP')
cv_MD<-read.csv('../data/Model_Results_Parameters/MD/cv_scores_MD.csv')%>%
separate(splits, sep='\\.',
into=c('dataset', 'method', 'true_or_y_scrambled_labels_used','train_test_split','cv_split'))%>%
mutate('testset'='CV', 'descriptor'='MD')
ts_MD<-read.csv('../data/Model_Results_Parameters/MD/test_scores_MD.csv')%>%
separate(splits, sep='\\.',
into=c('dataset', 'method', 'true_or_y_scrambled_labels_used','train_test_split','cv_split'))%>%
mutate('testset'='External Test Set', 'descriptor'='MD')
ex_MD<-read.csv('../data/FDA_Validation_Set_Results/Predictions_MD/ambiguous_results.csv')%>%
separate(splits, sep='\\.',
into=c('dataset', 'method', 'true_or_y_scrambled_labels_used','train_test_split','cv_split'))%>%
mutate('testset'='FDA Validation Set', 'descriptor'='MD')
cv_PT<-read.csv('../data/Model_Results_Parameters/PT/cv_scores_PT.csv')%>%
separate(splits, sep='\\.',
into=c('dataset', 'method', 'true_or_y_scrambled_labels_used','train_test_split','cv_split'))%>%
mutate('testset'='CV', 'descriptor'='PT')
ts_PT<-read.csv('../data/Model_Results_Parameters/PT/test_scores_PT.csv')%>%
separate(splits, sep='\\.',
into=c('dataset', 'method', 'true_or_y_scrambled_labels_used','train_test_split','cv_split'))%>%
mutate('testset'='External Test Set', 'descriptor'='PT')
ex_PT<-read.csv('../data/FDA_Validation_Set_Results/Predictions_PT/ambiguous_results.csv')%>%
separate(splits, sep='\\.',
into=c('dataset', 'method', 'true_or_y_scrambled_labels_used','train_test_split','cv_split'))%>%
mutate('testset'='FDA Validation Set', 'descriptor'='PT')
df_performance<-cv_ECFP%>%
bind_rows(ts_ECFP)%>%
bind_rows(cv_MD)%>%
bind_rows(ts_MD)%>%
bind_rows(cv_PT)%>%
bind_rows(ts_PT)%>%
bind_rows(ex_ECFP)%>%
bind_rows(ex_MD)%>%
bind_rows(ex_PT)
df_performance<- df_performance%>%select(dataset, method, descriptor, testset, everything())
df_performance$dataset_readable=NA
df_performance$dataset_readable[which(df_performance$dataset=='all')]<-'DILIrank \n (+SIDER)'
df_performance$dataset_readable[which(df_performance$dataset=='MCLCNC')]<-'DILIrank'
df_performance$dataset_readable[which(df_performance$dataset=='MCNC')]<-'DILIrank \n (-vLessConcern)'
write.csv(df_performance,'../data/Model_Results_Parameters/summarized_performance_Peter_Test.csv', row.names = F)
####Generate figure####
#Convert to factors and assing orders
df_performance$dataset_readable<-factor(df_performance$dataset_readable, levels=c('DILIrank \n (-vLessConcern)','DILIrank','DILIrank \n (+SIDER)'))
df_performance$testset<-factor(df_performance$testset, levels=c('CV','External Test Set','FDA Validation Set'))
#true_or_y_scrambled_labels_used =1 means standard model, everything else is scrambled
df_models<-df_performance%>%
filter(true_or_y_scrambled_labels_used ==1)
df_scrambledmedians<-df_performance%>%
filter(true_or_y_scrambled_labels_used !=1)%>%
group_by(dataset_readable, method, testset)%>%summarise("median_balacc"=median(balanced_accuracy))%>%mutate('scrambled'="Scrambled performance")
df_standardmeans<-df_performance%>%
filter(true_or_y_scrambled_labels_used ==1)%>%
group_by(dataset_readable, method, testset)%>%summarise("median_balacc"=mean(balanced_accuracy))%>%mutate('mean'="Mean performance")
#Plotting function
plot_performance<-function(df_models){
g <- ggplot(data = df_models,aes(x=dataset_readable, y=balanced_accuracy )) +
geom_boxplot(data = df_models, aes(fill=method))+
geom_point(data=df_scrambledmedians,
aes(y=median_balacc,fill=method, shape=scrambled, group=method),
position=position_dodge(width=0.75), size=2)+
geom_point(data=df_standardmeans,
aes(y=median_balacc,fill=method,  shape=mean, group=method),
position=position_dodge(width=0.75), size=2)+
scale_shape_manual(values=c(23,24))+
scale_fill_brewer(palette='Set2')+
facet_wrap(~testset) + theme_bw()+
ylab("Balanced Accuracy")+
theme(text=element_text(size=15), axis.text.x=element_text(angle=60, hjust=1),legend.title = element_blank(), axis.title.x = element_blank())
return(g)
}
#Generate and save
gg_ECFP<-plot_performance(df_models%>%filter(descriptor=='ECFP'))
ggsave(gg_ECFP,filename = '../plots/ECFP_performance_Peter_Test2.pdf', height = 4.5, width=8)
gg_MD<-plot_performance(df_models%>%filter(descriptor=='MD'))
ggsave(gg_MD,filename = '../plots/MD_performance_Peter_Test2.pdf.pdf', height = 4.5, width=8)
gg_PT<-plot_performance(df_models%>%filter(descriptor=='PT'))
ggsave(gg_PT,filename = '../plots/PT_performance_Peter_Test2.pdf.pdf', height = 4.5, width=8)
=======
t<-setdiff(colnames(df_enrichment),c('ID', 'Description'))
t_select<-t[which(as.numeric(t)%%0.02==0)]
significant<-df_enrichment[,which(!(colnames(df_enrichment)%in% t_select))]
significant<-significant%>%filter(rowMins(as.matrix(df_enrichment%>%dplyr::select(-ID, -Description)), na.rm=T)<0.05)
if(nrow(significant)>2){
p_sig<-significant%>%column_to_rownames('Description')%>%dplyr::select(-ID)
p_sig<-p_sig[,which(colMins(as.matrix(p_sig), na.rm=T)<0.05)] #A lot of columns without any significant result!
p_sig<-p_sig[which(rowMins(as.matrix(p_sig), na.rm=T)<0.05),] #A
pheatmap<-pheatmap((-log10(p_sig)),
cluster_cols=F,
show_rownames=T,
na_col='white',
fontsize=13,
color =  c('grey',(colorRampPalette((brewer.pal(n = 7, name =
"YlOrRd")))(100))),
breaks = c(0,seq(-log10(0.05),-log10(min(p_sig, na.rm=T)),by=((-log10(min(p_sig, na.rm = T))+log10(0.05))/100))))
ggsave(pheatmap, filename=paste0('../plots/enrichment_',name,'.pdf'), height = 15, width = 11)
}
gene_oi=df_plotting$Uniprot[which(abs(df_plotting[,which(colnames(df_plotting)=='RF_mcnc')])>0.0018& wilcox<0.05)]
x_RF <- enrichPathway(gene=as.character(unique(df_plotting$entrez[which(df_plotting$Uniprot %in% gene_oi)])),pvalueCutoff=0.05,organism='human', pAdjustMethod = 'fdr', readable=T, universe = as.character(unique(df_plotting$entrez)),minGSSize = 10)
r_RF<-x_RF@result%>%filter(p.adjust<0.05)%>%select(Description, geneID, p.adjust)%>%separate_rows(geneID, sep='/')%>%mutate('Method'='RF')
gene_oi=df_plotting$Uniprot[which(abs(df_plotting[,which(colnames(df_plotting)=='RF_mcnc')])>0.0018& wilcox<0.05)]
x_RF <- enrichPathway(gene=as.character(unique(df_plotting$entrez[which(df_plotting$Uniprot %in% gene_oi)])),pvalueCutoff=0.05,organism='human', pAdjustMethod = 'fdr', readable=T, universe = as.character(unique(df_plotting$entrez)),minGSSize = 10)
r_RF<-x_RF@result%>%filter(p.adjust<0.05)%>%dplyr::select(Description, geneID, p.adjust)%>%separate_rows(geneID, sep='/')%>%mutate('Method'='RF')
gene_oi=df_plotting$Uniprot[which(abs(df_plotting[,which(colnames(df_plotting)=='SVM_mcnc')])>0.23& wilcox<0.05)]
x_SVM <- enrichPathway(gene=as.character(unique(df_plotting$entrez[which(df_plotting$Uniprot %in% gene_oi)])),pvalueCutoff=0.05,organism='human', pAdjustMethod = 'fdr', readable=T, universe = as.character(unique(df_plotting$entrez)),minGSSize = 10)
r_SVM<-x_SVM@result%>%filter(p.adjust<0.05)%>%dplyr::select(Description, geneID, p.adjust)%>%separate_rows(geneID, sep='/')%>%mutate('Method'='SVM')
r3<-rbind(r_RF,r_SVM)
write.csv(r3, '../data/topinteractions.csv', quote = F)
nodes_pathways<-data.frame('nodes'=unique(r3$Description))
nodes_pathways$method<-ifelse(nodes_pathways$nodes %in% r$Description,
ifelse(nodes_pathways$nodes %in% r2$Description, 'SVM|RF', 'RF'),
'SVM')
nodes_pathways$method<-ifelse(nodes_pathways$nodes %in% r_RF$Description,
ifelse(nodes_pathways$nodes %in% r_SVM$Description, 'SVM|RF', 'RF'),
'SVM')
nodes_pathways$gene_annot<-'0'
nodes<-data.frame('nodes'=unique(r3$geneID))
nodes$gene_annot<-ifelse(nodes$nodes %in% r$geneID,
ifelse(nodes$nodes %in% r2$geneID, 'SVM|RF', 'RF'),
'SVM')
head(nodes_pathways)
gene_oi=df_plotting$Uniprot[which(abs(df_plotting[,which(colnames(df_plotting)=='RF_mcnc')])>0.0018& wilcox<0.05)]
x_RF <- enrichPathway(gene=as.character(unique(df_plotting$entrez[which(df_plotting$Uniprot %in% gene_oi)])),pvalueCutoff=0.05,organism='human', pAdjustMethod = 'fdr', readable=T, universe = as.character(unique(df_plotting$entrez)),minGSSize = 10)
r_RF<-x_RF@result%>%filter(p.adjust<0.05)%>%dplyr::select(Description, geneID, p.adjust)%>%separate_rows(geneID, sep='/')%>%mutate('Method'='RF')
gene_oi=df_plotting$Uniprot[which(abs(df_plotting[,which(colnames(df_plotting)=='SVM_mcnc')])>0.23& wilcox<0.05)]
x_SVM <- enrichPathway(gene=as.character(unique(df_plotting$entrez[which(df_plotting$Uniprot %in% gene_oi)])),pvalueCutoff=0.05,organism='human', pAdjustMethod = 'fdr', readable=T, universe = as.character(unique(df_plotting$entrez)),minGSSize = 10)
r_SVM<-x_SVM@result%>%filter(p.adjust<0.05)%>%dplyr::select(Description, geneID, p.adjust)%>%separate_rows(geneID, sep='/')%>%mutate('Method'='SVM')
r3<-rbind(r_RF,r_SVM)
write.csv(r3, '../data/topinteractions_cytoscape.csv', quote = F)
nodes_pathways<-data.frame('nodes'=unique(r3$Description))
nodes_pathways$pathway_annot<-ifelse(nodes_pathways$nodes %in% r_RF$Description,
ifelse(nodes_pathways$nodes %in% r_SVM$Description, 'SVM|RF', 'RF'),
'SVM')
nodes_genes<-data.frame('nodes'=unique(r3$geneID))
nodes_genes$gene_annot<-ifelse(nodes_genes$nodes %in% r_RF$geneID,
ifelse(nodes_genes$nodes %in% r_SVM$geneID, 'SVM|RF', 'RF'),
'SVM')
nodes<-full_join(nodes_genes,nodes_pathways)
write.csv(nodes, '../data/topnodes_cytoscape.csv', quote = F)
head(results_nodes)
results_nodes<-rbind(r_RF,r_SVM)
head(results_nodes)
r3<-full_join((r_RF,r_SVM, by='Description')
r3<-full_join(r_RF,r_SVM, by='Description')
head(r3)
head(results_nodes)
r_RF<-x_RF@result%>%filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('RF'='X')
r_SVM<-x_SVM@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('SVM'='X')
r3<-full_join(r_RF,r_SVM, by='Description')
write.csv(r3, '../data/SI_table_pathways.csv', quote = F)
head(df_featimp)
summary(df_featimp%>%column_to_rownames(Uniprot))
summary(df_featimp%>%column_to_rownames('Uniprot'))
quantile(df_featimp)
percent_rank(df_featimp$RF_mcnc)
quantile(df_featimp$RF_mcnc)
quantile(df_featimp$RF_mcnc, probs=c(0.75,0.9))
quantile(df_featimp$RF_mcnc, probs=c(0.75,0.96))
quantile(df_featimp$RF_mcnc, probs=c(0.75,0.95))
quantile(df_featimp$RF_mcnc, probs=c(0.75,0.98))
quantile(df_featimp$RF_mcnc, probs=c(0.75,1))
quantile(df_featimp$RF_mcnc, probs=c(0.75,0.99))
quantile(df_featimp$SVM_mcnc, probs=c(0.75,0.99))
quantile(df_featimp$SVM_mcnc, probs=c(0.75,0.98))
quantile(df_featimp$RF_mcnc, probs=c(0.75,0.98))
quantile(df_featimp$RF_mcnc, probs=c(0.75,0.97))
quantile(df_featimp$SVM_mcnc, probs=c(0.75,0.97))
quantile(df_featimp$SVM_mcnc, probs=c(0.75,0.99))
quantile(df_featimp$SVM_mcnc, probs=c(0.75,0.96))
quantile(df_featimp$RF_mcnc, probs=c(0.75,0.96))
quantile(df_featimp$RF_mcnc, probs=c(0.75,0.96.5))
quantile(df_featimp$SVM_mcnc, probs=c(0.75,0.96))
for(index in 2:ncol(df2)){
df_enrichment<-data.frame()
name<-colnames(df2)[index]
print(name)
if (str_detect(name, pattern='SVM')){screenlist<-seq(0.07,0.5,0.01)}
if (str_detect(name, pattern='RF')){screenlist<-seq(0.0007,0.004,0.0001)}
if (str_detect(name, pattern='mclcnc')){wilcox<-df_plotting$mclcnc}
if (str_detect(name, pattern='mcnc')){wilcox<-df_plotting$mcnc}
if (str_detect(name, pattern='mclcnc')){wilcox<-df_plotting$mcnc}
for (t in screenlist) {
gene_oi=df_plotting$Uniprot[which(abs(df_plotting[,which(colnames(df_plotting)==name)])>t& wilcox<0.05)]
if(length(gene_oi)>0){
x <- enrichPathway(gene=as.character(unique(df_plotting$entrez[which(df_plotting$Uniprot %in% gene_oi)])),pvalueCutoff=0.05,organism='human', pAdjustMethod = 'fdr', readable=T, universe = as.character(unique(df_plotting$entrez)),minGSSize = 10)
result<-x@result%>%dplyr::select(ID, p.adjust,Description)
colnames(result)[which(colnames(result)=='p.adjust')]<-t
if (ncol(df_enrichment)==0){
df_enrichment<-result
}else{
df_enrichment<-full_join(df_enrichment, result)
}
}
}
write.csv(df_enrichment, paste0('../data/enrichment/',name,'.csv'), row.names = F)
}
for(index in 2:ncol(df_featimp)){
df_enrichment<-data.frame()
name<-colnames(df_featimp)[index]
print(name)
if (str_detect(name, pattern='SVM')){screenlist<-seq(0.07,0.5,0.01)}
if (str_detect(name, pattern='RF')){screenlist<-seq(0.0007,0.004,0.0001)}
if (str_detect(name, pattern='mclcnc')){wilcox<-df_plotting$mclcnc}
if (str_detect(name, pattern='mcnc')){wilcox<-df_plotting$mcnc}
if (str_detect(name, pattern='mclcnc')){wilcox<-df_plotting$mcnc}
for (t in screenlist) {
gene_oi=df_plotting$Uniprot[which(abs(df_plotting[,which(colnames(df_plotting)==name)])>t& wilcox<0.05)]
if(length(gene_oi)>0){
x <- enrichPathway(gene=as.character(unique(df_plotting$entrez[which(df_plotting$Uniprot %in% gene_oi)])),pvalueCutoff=0.05,organism='human', pAdjustMethod = 'fdr', readable=T, universe = as.character(unique(df_plotting$entrez)),minGSSize = 10)
result<-x@result%>%dplyr::select(ID, p.adjust,Description)
colnames(result)[which(colnames(result)=='p.adjust')]<-t
if (ncol(df_enrichment)==0){
df_enrichment<-result
}else{
df_enrichment<-full_join(df_enrichment, result)
}
}
}
write.csv(df_enrichment, paste0('../data/enrichment/',name,'.csv'), row.names = F)
}
#RF_mcnc
for (index in 2:7){
name<-colnames(df_featimp)[index]
df_enrichment<-read.csv(paste0('../data/enrichment_',name,'.csv'), check.names = F)
t<-setdiff(colnames(df_enrichment),c('ID', 'Description'))
t_select<-t[which(as.numeric(t)%%0.02==0)]
significant<-df_enrichment[,which(!(colnames(df_enrichment)%in% t_select))]
significant<-significant%>%filter(rowMins(as.matrix(df_enrichment%>%dplyr::select(-ID, -Description)), na.rm=T)<0.05)
if(nrow(significant)>2){
p_sig<-significant%>%column_to_rownames('Description')%>%dplyr::select(-ID)
p_sig<-p_sig[,which(colMins(as.matrix(p_sig), na.rm=T)<0.05)] #A lot of columns without any significant result!
p_sig<-p_sig[which(rowMins(as.matrix(p_sig), na.rm=T)<0.05),] #A
pheatmap<-pheatmap((-log10(p_sig)),
cluster_cols=F,
show_rownames=T,
na_col='white',
fontsize=13,
color =  c('grey',(colorRampPalette((brewer.pal(n = 7, name =
"YlOrRd")))(100))),
breaks = c(0,seq(-log10(0.05),-log10(min(p_sig, na.rm=T)),by=((-log10(min(p_sig, na.rm = T))+log10(0.05))/100))))
ggsave(pheatmap, filename=paste0('../plots/enrichment_',name,'.pdf'), height = 15, width = 11)
}
}
#RF_mcnc
for (index in 2:7){
name<-colnames(df_featimp)[index]
df_enrichment<-read.csv(paste0('../data/enrichment_',name,'.csv'), check.names = F)
t<-setdiff(colnames(df_enrichment),c('ID', 'Description'))
t_select<-t[which(as.numeric(t)%%0.02==0)]
significant<-df_enrichment[,which(!(colnames(df_enrichment)%in% t_select))]
significant<-significant%>%filter(rowMins(as.matrix(df_enrichment%>%dplyr::select(-ID, -Description)), na.rm=T)<0.05)
if(nrow(significant)>2){
p_sig<-significant%>%column_to_rownames('Description')%>%dplyr::select(-ID)
p_sig<-p_sig[,which(colMins(as.matrix(p_sig), na.rm=T)<0.05)] #A lot of columns without any significant result!
p_sig<-p_sig[which(rowMins(as.matrix(p_sig), na.rm=T)<0.05),] #A
pheatmap<-pheatmap((-log10(p_sig)),
cluster_cols=F,
show_rownames=T,
na_col='white',
fontsize=13,
color =  c('grey',(colorRampPalette((brewer.pal(n = 7, name =
"YlOrRd")))(100))),
breaks = c(0,seq(-log10(0.05),-log10(min(p_sig, na.rm=T)),by=((-log10(min(p_sig, na.rm = T))+log10(0.05))/100))))
ggsave(pheatmap, filename=paste0('../plots/enrichment_',name,'.pdf'), height = 15, width = 11)
}
}
r_RF<-x_RF@result%>%filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('RF'='X')
r_SVM<-x_SVM@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('SVM'='X')
r3<-full_join(r_RF,r_SVM, by='Description')
head(r3)
head(r_SVM
)
#Prepare for SI table
r_RF<-x_RF@result%>%filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('RF_padj'=p.adjust)%>%
mutate('RF'='X')%>%
mutate('RF_GeneRatio'=GeneRatio)%>%
r_SVM<-x_SVM@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('SVM_padj'=p.adjust)%>%
mutate('SVM'='X')%>%
mutate('SVM_GeneRatio'=GeneRatio)%>%
select(ID,Description)
head(r_RF)
#Prepare for SI table
r_RF<-x_RF@result%>%filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('RF_padj'=p.adjust)%>%
mutate('RF'='X')%>%
mutate('RF_GeneRatio'=GeneRatio)%>%
dplyr::select(-GenRatio, -BgRatio, -p.adjust)
#Prepare for SI table
r_RF<-x_RF@result%>%filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('RF_padj'=p.adjust)%>%
mutate('RF'='X')%>%
mutate('RF_GeneRatio'=GeneRatio)%>%
dplyr::select(-GeneRatio, -BgRatio, -p.adjust)
r_SVM<-x_SVM@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('SVM_padj'=p.adjust)%>%
mutate('SVM'='X')%>%
mutate('SVM_GeneRatio'=GeneRatio)%>%
dplyr::select(-GeneRatio, -BgRatio, -p.adjust)
head(r_SVM)
#Prepare for SI table
r_RF<-x_RF@result%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('RF_padj'=p.adjust)%>%
mutate('RF'='X')%>%
mutate('RF_GeneRatio'=GeneRatio)%>%
dplyr::select(-GeneRatio, -BgRatio, -p.adjust)
r_SVM<-x_SVM@result%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('SVM_padj'=p.adjust)%>%
mutate('SVM'='X')%>%
mutate('SVM_GeneRatio'=GeneRatio)%>%
dplyr::select(-GeneRatio, -BgRatio, -p.adjust)
#Prepare for SI table
r_RF<-x_RF@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('RF_padj'=p.adjust)%>%
mutate('RF'='X')%>%
mutate('RF_GeneRatio'=GeneRatio)%>%
dplyr::select(-GeneRatio, -BgRatio, -p.adjust)
r_SVM<-x_SVM@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('SVM_padj'=p.adjust)%>%
mutate('SVM'='X')%>%
mutate('SVM_GeneRatio'=GeneRatio)%>%
dplyr::select(-GeneRatio, -BgRatio, -p.adjust)
r3<-full_join(r_RF,r_SVM, by='Description')
write.csv(r3, '../data/SI_table_pathways.csv', quote = F)
head(r3)
r3<-full_join(r_RF,r_SVM, by=c('Description','ID'))
head(r3)
#Prepare for SI table
r_RF<-x_RF@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('RF_padj'=p.adjust)%>%
mutate('RF_GeneRatio'=GeneRatio)%>%
dplyr::select(-GeneRatio, -BgRatio, -p.adjust)
r_SVM<-x_SVM@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('SVM_padj'=p.adjust)%>%
mutate('SVM_GeneRatio'=GeneRatio)%>%
dplyr::select(-GeneRatio, -BgRatio, -p.adjust)
r3<-full_join(r_RF,r_SVM, by=c('Description','ID'))
write.csv(r3, '../data/SI_table_pathways.csv', quote = F)
heaD(r3)
head(r3)
write.csv(r3, '../data/SI_table_pathways.csv', quote = F)
write.csv(r3, '../data/SI_table_pathways.csv', quote = F)
0.007
0.0007
#RF_mcnc
for (index in 2:7){
name<-colnames(df_featimp)[index]
df_enrichment<-read.csv(paste0('../data/enrichment_',name,'.csv'), check.names = F)
t<-setdiff(colnames(df_enrichment),c('ID', 'Description'))
t_select<-t[which(as.numeric(t)%%0.02==0)]
significant<-df_enrichment[,which(!(colnames(df_enrichment)%in% t_select))]
significant<-significant%>%filter(rowMins(as.matrix(df_enrichment%>%dplyr::select(-ID, -Description)), na.rm=T)<0.05)
if(nrow(significant)>2){
p_sig<-significant%>%column_to_rownames('Description')%>%dplyr::select(-ID)
p_sig<-p_sig[,which(colMins(as.matrix(p_sig), na.rm=T)<0.05)] #A lot of columns without any significant result!
p_sig<-p_sig[which(rowMins(as.matrix(p_sig), na.rm=T)<0.05),] #A
pheatmap<-pheatmap((-log10(p_sig)),
cluster_cols=F,
show_rownames=T,
na_col='white',
fontsize=13,
color =  c('grey',(colorRampPalette((brewer.pal(n = 7, name =
"YlOrRd")))(100))),
breaks = c(0,seq(-log10(0.05),-log10(min(p_sig, na.rm=T)),by=((-log10(min(p_sig, na.rm = T))+log10(0.05))/100))))
ggsave(pheatmap, filename=paste0('../plots/enrichment_',name,'.pdf'), height = 15, width = 11)
}
}
#RF_mcnc
for (index in 2:7){
name<-colnames(df_featimp)[index]
df_enrichment<-read.csv(paste0('../data/enrichment/',name,'.csv'), check.names = F)
t<-setdiff(colnames(df_enrichment),c('ID', 'Description'))
t_select<-t[which(as.numeric(t)%%0.02==0)]
significant<-df_enrichment[,which(!(colnames(df_enrichment)%in% t_select))]
significant<-significant%>%filter(rowMins(as.matrix(df_enrichment%>%dplyr::select(-ID, -Description)), na.rm=T)<0.05)
if(nrow(significant)>2){
p_sig<-significant%>%column_to_rownames('Description')%>%dplyr::select(-ID)
p_sig<-p_sig[,which(colMins(as.matrix(p_sig), na.rm=T)<0.05)] #A lot of columns without any significant result!
p_sig<-p_sig[which(rowMins(as.matrix(p_sig), na.rm=T)<0.05),] #A
pheatmap<-pheatmap((-log10(p_sig)),
cluster_cols=F,
show_rownames=T,
na_col='white',
fontsize=13,
color =  c('grey',(colorRampPalette((brewer.pal(n = 7, name =
"YlOrRd")))(100))),
breaks = c(0,seq(-log10(0.05),-log10(min(p_sig, na.rm=T)),by=((-log10(min(p_sig, na.rm = T))+log10(0.05))/100))))
ggsave(pheatmap, filename=paste0('../plots/enrichment_',name,'.pdf'), height = 15, width = 11)
}
}
index=2
name<-colnames(df_featimp)[index]
df_enrichment<-read.csv(paste0('../data/enrichment/',name,'.csv'), check.names = F)
t<-setdiff(colnames(df_enrichment),c('ID', 'Description'))
t_select<-t[which(as.numeric(t)%%0.02==0)]
significant<-df_enrichment[,which(!(colnames(df_enrichment)%in% t_select))]
significant<-significant%>%filter(rowMins(as.matrix(df_enrichment%>%dplyr::select(-ID, -Description)), na.rm=T)<0.05)
if(nrow(significant)>2){
p_sig<-significant%>%column_to_rownames('Description')%>%dplyr::select(-ID)
p_sig<-p_sig[,which(colMins(as.matrix(p_sig), na.rm=T)<0.05)] #A lot of columns without any significant result!
p_sig<-p_sig[which(rowMins(as.matrix(p_sig), na.rm=T)<0.05),] #A
pheatmap<-pheatmap((-log10(p_sig)),
cluster_cols=F,
show_rownames=T,
na_col='white',
fontsize=13,
color =  c('grey',(colorRampPalette((brewer.pal(n = 7, name =
"YlOrRd")))(100))),
breaks = c(0,seq(-log10(0.05),-log10(min(p_sig, na.rm=T)),by=((-log10(min(p_sig, na.rm = T))+log10(0.05))/100))))
ggsave(pheatmap, filename=paste0('../plots/enrichment_',name,'.pdf'), height = 10, width = 11)
name<-colnames(df_featimp)[index]
name<-colnames(df_featimp)[index]
name<-colnames(df_featimp)[index]
name<-colnames(df_featimp)[index]
name<-colnames(df_featimp)[index]
name<-colnames(df_featimp)[index]
df_enrichment<-read.csv(paste0('../data/enrichment/',name,'.csv'), check.names = F)
t<-setdiff(colnames(df_enrichment),c('ID', 'Description'))
t_select<-t[which(as.numeric(t)%%0.02==0)]
significant<-df_enrichment[,which(!(colnames(df_enrichment)%in% t_select))]
significant<-significant%>%filter(rowMins(as.matrix(df_enrichment%>%dplyr::select(-ID, -Description)), na.rm=T)<0.05)
if(nrow(significant)>2){
p_sig<-significant%>%column_to_rownames('Description')%>%dplyr::select(-ID)
p_sig<-p_sig[,which(colMins(as.matrix(p_sig), na.rm=T)<0.05)] #A lot of columns without any significant result!
p_sig<-p_sig[which(rowMins(as.matrix(p_sig), na.rm=T)<0.05),] #A
pheatmap<-pheatmap((-log10(p_sig)),
cluster_cols=F,
show_rownames=T,
na_col='white',
fontsize=13,
color =  c('grey',(colorRampPalette((brewer.pal(n = 7, name =
"YlOrRd")))(100))),
breaks = c(0,seq(-log10(0.05),-log10(min(p_sig, na.rm=T)),by=((-log10(min(p_sig, na.rm = T))+log10(0.05))/100))))
ggsave(pheatmap, filename=paste0('../plots/enrichment_',name,'.pdf'), height = 10, width = 11)
}
ggsave(pheatmap, filename=paste0('../plots/enrichment_',name,'.pdf'), height = 9, width = 11)
gene_oi=df_plotting$Uniprot[which(abs(df_plotting[,which(colnames(df_plotting)=='RF_mcnc')])>0.0018& wilcox<0.05)]
x_RF <- enrichPathway(gene=as.character(unique(df_plotting$entrez[which(df_plotting$Uniprot %in% gene_oi)])),
pvalueCutoff=0.05,organism='human',
pAdjustMethod = 'fdr',
readable=T,
universe = as.character(unique(df_plotting$entrez)),
minGSSize = 10)
gene_oi=df_plotting$Uniprot[which(abs(df_plotting[,which(colnames(df_plotting)=='SVM_mcnc')])>0.23& wilcox<0.05)]
x_SVM <- enrichPathway(gene=as.character(unique(df_plotting$entrez[which(df_plotting$Uniprot %in% gene_oi)])),
pvalueCutoff=0.05,
organism='human',
pAdjustMethod = 'fdr',
readable=T,
universe = as.character(unique(df_plotting$entrez)),
minGSSize = 10)
#Prepare for cytoscape figure
r_RF<-x_RF@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(Description, geneID, p.adjust)%>%
separate_rows(geneID, sep='/')%>%
mutate('Method'='RF')
r_SVM<-x_SVM@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(Description, geneID, p.adjust)%>%
separate_rows(geneID, sep='/')%>%
mutate('Method'='SVM')
results_nodes<-rbind(r_RF,r_SVM)
write.csv(results_nodes, '../data/enrichment/topinteractions_cytoscape.csv', quote = F)
#Prepare for SI table
r_RF<-x_RF@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('RF_padj'=p.adjust)%>%
mutate('RF_GeneRatio'=GeneRatio)%>%
dplyr::select(-GeneRatio, -BgRatio, -p.adjust)
r_SVM<-x_SVM@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('SVM_padj'=p.adjust)%>%
mutate('SVM_GeneRatio'=GeneRatio)%>%
dplyr::select(-GeneRatio, -BgRatio, -p.adjust)
r3<-full_join(r_RF,r_SVM, by=c('Description','ID'))
write.csv(r3, '../data/enrichment/SI_table_pathways.csv', quote = F)
#Prepare node information for cytoscape
nodes_pathways<-data.frame('nodes'=unique(results_nodes$Description))
nodes_pathways$pathway_annot<-ifelse(nodes_pathways$nodes %in% r_RF$Description,
ifelse(nodes_pathways$nodes %in% r_SVM$Description, 'SVM|RF', 'RF'),
'SVM')
nodes_genes<-data.frame('nodes'=unique(results_nodes$geneID))
nodes_genes$gene_annot<-ifelse(nodes_genes$nodes %in% r_RF$geneID,
ifelse(nodes_genes$nodes %in% r_SVM$geneID, 'SVM|RF', 'RF'),
'SVM')
nodes<-full_join(nodes_genes,nodes_pathways)
write.csv(nodes, '../data/enrichment/topnodes_cytoscape.csv', quote = F)
SI_table<-allfeat%>%filter(RF_mcnc>0.0018|SVM_mcnc>0.23)%>%filter(wilcoxgreat_wilcox_p.adj<0.05)%>%select(Symbol,Name, Protein_Classification, RF_mcnc, SVM_mcnc)
head(allfat)
head(allfeat)
head(df_enrichment)
SI_table<-allfeat%>%inner_join(df_featimp)%>%filter(RF_mcnc>0.0018|SVM_mcnc>0.23)%>%filter(wilcoxgreat_wilcox_p.adj<0.05)%>%select(Symbol,Name, Protein_Classification, RF_mcnc, SVM_mcnc)
SI_table<-allfeat%>%inner_join(df_featimp)%>%filter(RF_mcnc>0.0018|SVM_mcnc>0.23)%>%filter(mcnc<0.05)%>%select(Symbol,Name, Protein_Classification, RF_mcnc, SVM_mcnc)
SI_table<-allfeat%>%inner_join(df_featimp)%>%filter(RF_mcnc>0.0018|SVM_mcnc>0.23)%>%filter(mcnc<0.05)%>%dplyr::select(Symbol,Name, Protein_Classification, RF_mcnc, SVM_mcnc)
head(df_featimp)
head(allfeat)
SI_table<-allfeat%>%inner_join(df_featimp)%>%%>%df_targetinfo%>%filter(RF_mcnc>0.0018|SVM_mcnc>0.23)%>%filter(mcnc<0.05)%>%dplyr::select(Symbol,Name, Protein_Classification, RF_mcnc, SVM_mcnc)
SI_table<-allfeat%>%inner_join(df_featimp)%>%left_join(df_targetinfo)%>%filter(RF_mcnc>0.0018|SVM_mcnc>0.23)%>%filter(mcnc<0.05)%>%dplyr::select(Symbol,Name, Protein_Classification, RF_mcnc, SVM_mcnc)
head(SI_table)
write.csv(SI_table, '../data/enrichment/SI_table_genes.csv', quote = F, row.names = F)
write.csv(annotation, '../data/annotation_gene.csv')
nodes_pathways<-data.frame('nodes'=unique(results_nodes$Description))
nodes_pathways$pathway_annot<-ifelse(nodes_pathways$nodes %in% r_RF$Description,
ifelse(nodes_pathways$nodes %in% r_SVM$Description, 'SVM|RF', 'RF'),
'SVM')
nodes_genes<-data.frame('nodes'=unique(results_nodes$geneID))
nodes_genes$gene_annot<-ifelse(nodes_genes$nodes %in% r_RF$geneID,
ifelse(nodes_genes$nodes %in% r_SVM$geneID, 'SVM|RF', 'RF'),
'SVM')
nodes<-full_join(nodes_genes,nodes_pathways)
head(nodes)
summary(nodes$gene_annot)
table(nodes$gene_annot)
View(NoDILI)
View(r_RF)
View(r_SVM)
#Prepare node information for cytoscape
nodes_pathways<-data.frame('nodes'=unique(results_nodes$Description))
nodes_pathways$pathway_annot<-ifelse(nodes_pathways$nodes %in% r_RF$Description,
ifelse(nodes_pathways$nodes %in% r_SVM$Description, 'SVM|RF', 'RF'),
'SVM')
nodes_genes$gene_annot
#Prepare for cytoscape figure
r_RF<-x_RF@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(Description, geneID, p.adjust)%>%
separate_rows(geneID, sep='/')%>%
mutate('Method'='RF')
r_SVM<-x_SVM@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(Description, geneID, p.adjust)%>%
separate_rows(geneID, sep='/')%>%
mutate('Method'='SVM')
results_nodes<-rbind(r_RF,r_SVM)
#Prepare node information for cytoscape
nodes_pathways<-data.frame('nodes'=unique(results_nodes$Description))
nodes_pathways$pathway_annot<-ifelse(nodes_pathways$nodes %in% r_RF$Description,
ifelse(nodes_pathways$nodes %in% r_SVM$Description, 'SVM|RF', 'RF'),
'SVM')
View(nodes_pathways)
nodes_genes<-data.frame('nodes'=unique(results_nodes$geneID))
nodes_genes$gene_annot<-ifelse(nodes_genes$nodes %in% r_RF$geneID,
ifelse(nodes_genes$nodes %in% r_SVM$geneID, 'SVM|RF', 'RF'),
'SVM')
nodes<-full_join(nodes_genes,nodes_pathways)
write.csv(nodes, '../data/enrichment/topnodes_cytoscape.csv', quote = F)
df_old<-read.csv('~/OneDrive - University of Cambridge/CAMDA/processed_data/target_analysis/SI_tabletargets.csv')
head(df_old)
df_old<-read.csv('~/OneDrive - University of Cambridge/CAMDA/processed_data/target_analysis/SI_tabletargets.csv', check.names = F)
head(SI_table)
setdiff(df_old$`Gene Symbol`, SI_table$Symbol)
setdiff( SI_table$Symbol, df_old$`Gene Symbol`)
View(SI_table)
length(SI_table)
length(SI_table$Symbol)
length(SI_table$Symbol)
length(df_old$`Gene Symbol`)
2101466/14025286
3608817/14025286
6135387/14025286
>>>>>>> 069b73e6493dfbe0482ce1c5287f0023888e35bd
