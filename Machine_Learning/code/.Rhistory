facet_grid(class~DOSE_LEVEL)+
geom_point(data=sum_first_act_mean, size=0.5)+
geom_line(data=sum_first_act_mean)
g1
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD, (n)))+
theme_bw()+
geom_point(size=0.5, alpha=0.5)+
geom_line(aes(group=condition), alpha=0.2)+
facet_grid(class~DOSE_LEVEL)+
geom_point(data=sum_first_act_mean, size=0.5)+
geom_line(data=sum_first_act_mean)
g1
sum_first_act_mean=sum_first_act%>%group_by(SACRIFICE_PERIOD,DOSE_LEVEL, class)%>%
summarise(n=median(n), )
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD, (n)))+
theme_bw()+
geom_point(size=0.5, alpha=0.5)+
geom_line(aes(group=condition), alpha=0.2)+
facet_grid(class~DOSE_LEVEL)+
geom_point(data=sum_first_act_mean, size=0.5)+
geom_line(data=sum_first_act_mean)
g1
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD, (n)))+
theme_bw()+
geom_point(size=0.5, alpha=0.5)+
geom_line(aes(group=condition), alpha=0.2)+
facet_grid(class~DOSE_LEVEL)+
geom_point(data=sum_first_act_mean, size=0.5)+
geom_line(data=sum_first_act_mean, color='red')
g1
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD, (n)))+
theme_bw()+
geom_point(size=0.5, alpha=0.5)+
geom_line(aes(group=condition), alpha=0.2)+
facet_grid(class~DOSE_LEVEL)+
geom_point(data=sum_first_act_mean, size=0.5)+
geom_line(data=sum_first_act_mean, color='red', aes(group=DOSE_LEVEL))
g1
g1=ggplot(sum_first_act,aes (as.numeric(SACRIFICE_PERIOD),freq,color=DOSE_LEVEL))+
theme_bw()+
geom_boxplot(outlier.shape = NA)+
scale_fill_viridis_d(begin=0.3, end=1)+
scale_y_continuous(limits=c(NA,200))
g1
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD,n,color=DOSE_LEVEL))+
theme_bw()+
geom_boxplot(outlier.shape = NA)+
scale_fill_viridis_d(begin=0.3, end=1)+
scale_y_continuous(limits=c(NA,200))+
facet_wrap(~class)
g1
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD,n,fill=DOSE_LEVEL))+
theme_bw()+
geom_boxplot(outlier.shape = NA)+
scale_fill_viridis_d(begin=0.3, end=1)+
scale_y_continuous(limits=c(NA,200))+
facet_wrap(~class)
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD,n,fill=DOSE_LEVEL))+
theme_bw()+
geom_boxplot(outlier.shape = NA)+
scale_fill_viridis_d(begin=0.3, end=1)+
scale_y_continuous(limits=c(NA,200))+
facet_wrap(~class)
g1
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD,n,fill=DOSE_LEVEL))+
theme_bw()+
geom_boxplot(outlier.shape = NA)+
scale_fill_viridis_d(begin=0.3, end=1)+
scale_y_continuous(limits=c(NA,200))+
facet_wrap(~class)+
scale_x_log10()
g1
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD,n,fill=DOSE_LEVEL))+
theme_bw()+
geom_boxplot(outlier.shape = NA)+
scale_fill_viridis_d(begin=0.3, end=1)+
scale_y_continuous(limits=c(NA,200))+
facet_wrap(~class)+
scale_y_log10()
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD,n,fill=DOSE_LEVEL))+
theme_bw()+
geom_boxplot(outlier.shape = NA)+
scale_fill_viridis_d(begin=0.3, end=1)+
scale_y_continuous(limits=c(NA,200), trans = 'pseudo_log')+
facet_wrap(~class)
g1
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD,n,fill=DOSE_LEVEL))+
theme_bw()+
geom_boxplot(outlier.shape = NA)+
scale_fill_viridis_d(begin=0.3, end=1)+
scale_y_continuous(limits=c(NA,200))+
facet_wrap(~class)
g1
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD,n,fill=class))+
theme_bw()+
geom_boxplot(outlier.shape = NA)+
scale_fill_viridis_d(begin=0.3, end=1)+
scale_y_continuous(limits=c(NA,200))+
facet_wrap(~DOSE_LEVEL)
g1
head(sum_first_act)
t=sum_first_act%>%pivot_wider(names_from = class, values_from-n)
t=sum_first_act%>%pivot_wider(names_from = class, values_from=n)
View(t)
t=sum_first_act%>%pivot_wider(names_from = class, values_from=n)%>%mutate(diff=`Differential expression`-`first activation`)
View(t)
t=sum_first_act%>%pivot_wider(names_from = class, values_from=n)%>%mutate(diff=`Differential expression`-`first activation`)%>%filter(SACRIFICE_PERIOD=='24 h', DOSE_LEVEL=='High')
View(t)
t=sum_first_act%>%pivot_wider(names_from = class, values_from=n)%>%mutate(diff=`Differential expression`-`first activation`)%>%filter(DOSE_LEVEL=='High')
t=sum_first_act%>%pivot_wider(names_from = class, values_from=n)%>%mutate(diff=`Differential expression`-`first activation`)%>%filter(SACRIFICE_PERIOD=='24 hr', DOSE_LEVEL=='High')
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD,n,fill=class))+
theme_bw()+
geom_boxplot(outlier.shape = 0.4)+
scale_fill_viridis_d(begin=0.3, end=1)+
scale_y_continuous(limits=c(NA,200))+
facet_wrap(~DOSE_LEVEL)
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD,n,fill=class))+
theme_bw()+
geom_boxplot(outlier.size = 0.4)+
scale_fill_viridis_d(begin=0.3, end=1)+
scale_y_continuous(limits=c(NA,200))+
facet_wrap(~DOSE_LEVEL)
g1
sum_first_act<-first_active_gex%>%group_by(COMPOUND_NAME,DOSE_LEVEL, SACRIFICE_PERIOD)%>%
summarise(n=n())%>%
order_timepoints()%>%
order_dose_levels()%>%
mutate(condition=paste0(COMPOUND_NAME, DOSE_LEVEL), class='First activation')%>%
bind_rows(DE_all%>%mutate(class='Differential expression'))
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD,n,fill=class))+
theme_bw()+
geom_boxplot(outlier.size = 0.4)+
scale_fill_viridis_d(begin=0.3, end=1)+
scale_y_continuous(limits=c(NA,200))+
facet_wrap(~DOSE_LEVEL)
g1
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD,n,fill=class))+
theme_bw()+
geom_boxplot(outlier.size = 0.4)+
scale_fill_viridis_d(begin=0.3, end=1)+
# scale_y_continuous(limits=c(NA,200))+
facet_wrap(~DOSE_LEVEL)
g1
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD,n,fill=class))+
theme_bw()+
geom_boxplot(outlier.size = 0.4)+
scale_fill_viridis_d(begin=0.3, end=1)+
scale_y_continuous(limits=c(NA,600))+
facet_wrap(~DOSE_LEVEL)
g1
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD,n,fill=class))+
theme_bw()+
geom_boxplot(outlier.size = 0.4)+
#scale_fill_viridis_d(begin=0.3, end=1)+
scale_y_continuous(limits=c(NA,600))+
facet_wrap(~DOSE_LEVEL)
g1
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD,n,fill=class))+
theme_bw()+
geom_boxplot(outlier.size = 0.4)+
scale_fill_viridis_d(begin=0.3, end=0.8)+
scale_y_continuous(limits=c(NA,600))+
facet_wrap(~DOSE_LEVEL)
g1
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD,n,fill=class))+
theme_bw()+
geom_boxplot(outlier.size = 0.4)+
scale_fill_viridis_d(begin=0.4, end=0.9)+
scale_y_continuous(limits=c(NA,600))+
facet_wrap(~DOSE_LEVEL)
g1
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD,n,fill=class))+
theme_bw()+
geom_boxplot(outlier.size = 0.4)+
scale_fill_viridis_d(begin=0.4, end=1)+
scale_y_continuous(limits=c(NA,600))+
facet_wrap(~DOSE_LEVEL)
g1
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD,n,fill=class))+
theme_bw()+
geom_boxplot(outlier.size = 0.4)+
scale_fill_viridis_d(begin=0.4, end=1)+
scale_y_continuous(limits=c(NA,600))+
facet_wrap(~DOSE_LEVEL)+
theme(legend.title = element_blank(), axis.text.x = element_text(angle=0))
g1
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD,n,fill=class))+
theme_bw()+
geom_boxplot(outlier.size = 0.4)+
scale_fill_viridis_d(begin=0.4, end=1)+
scale_y_continuous(limits=c(NA,600))+
facet_wrap(~DOSE_LEVEL)+
theme(legend.title = element_blank(), axis.text.x = element_text(angle=90))
g1
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD,n,fill=class))+
theme_bw()+
geom_boxplot(outlier.size = 0.4)+
scale_fill_viridis_d(begin=0.4, end=1)+
scale_y_continuous(limits=c(NA,2))+
facet_wrap(~DOSE_LEVEL)+
theme(legend.title = element_blank(), axis.text.x = element_text(angle=90))
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD,n,fill=class))+
theme_bw()+
geom_boxplot(outlier.size = 0.4)+
scale_fill_viridis_d(begin=0.4, end=1)+
scale_y_continuous(limits=c(NA,200))+
facet_wrap(~DOSE_LEVEL)+
theme(legend.title = element_blank(), axis.text.x = element_text(angle=90))
g1
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD,n,fill=class))+
theme_bw()+
geom_boxplot(outlier.size = 0.4)+
scale_fill_viridis_d(begin=0.4, end=1)+
scale_y_continuous(limits=c(NA,300))+
facet_wrap(~DOSE_LEVEL)+
theme(legend.title = element_blank(), axis.text.x = element_text(angle=90))
g1
dir.create('../../plots/DEG')
ggsave(g1, '../../plots/DEG/first_act.pdf', 5,7)
ggsave(g1, filename = '../../plots/DEG/first_act.pdf', 5,7)
ggsave(g1, filename = '../../plots/DEG/first_act.pdf', width = 5,height = 7)
ggsave(g1, filename = '../../plots/DEG/first_act.pdf', width = 5.5,height = 4)
ggsave(g1, filename = '../../plots/DEG/first_act.pdf', width = 6,height = 4)
ggsave(g1, filename = '../../plots/DEG/first_act.pdf', width = 7,height = 4)
ggsave(g1, filename = '../../plots/DEG/first_act.pdf', width = 8,height = 4)
ggsave(g1, filename = '../../plots/DEG/first_act.pdf', width = 9,height = 4)
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD,n,fill=class))+
theme_bw()+
geom_boxplot(outlier.size = 0.4)+
scale_fill_viridis_d(begin=0.4, end=1)+
scale_y_continuous(limits=c(NA,300))+
facet_wrap(~DOSE_LEVEL)+
theme(legend.title = element_blank(), axis.text.x = element_text(angle=90))+
xlab("Number of genes")
ggsave(g1, filename = '../../plots/DEG/first_act.pdf', width = 9,height = 4)
g1=ggplot(sum_first_act,aes (SACRIFICE_PERIOD,n,fill=class))+
theme_bw()+
geom_boxplot(outlier.size = 0.4)+
scale_fill_viridis_d(begin=0.4, end=1)+
scale_y_continuous(limits=c(NA,300))+
facet_wrap(~DOSE_LEVEL)+
theme(legend.title = element_blank(), axis.text.x = element_text(angle=90), axis.title = element_blank())+
ylab("Number of genes")
ggsave(g1, filename = '../../plots/DEG/first_act.pdf', width = 9,height = 4)
ggsave(g1, filename = '../../plots/DEG/first_act.pdf', width = 8.5,height = 3.7)
cond
dim(cond)
length(unique(cond$COMPOUND_NAME))
head(first_active_histo)
ggsave(g1, filename = '../../plots/DEG/first_act.pdf', width = 8,height = 3.7)
ggsave(g1, filename = '../../plots/DEG/first_act.pdf', width = 7.8,height = 3.7)
legnth(unique(first_active_gex$node_id))
length(unique(first_active_gex$node_id))
df_min=read.csv('../../processed_data/TGGate/genecor_comphisto_median.csv', check.names = F, row.names = 1)
first_active_gex=first_active_gex_unfiltered%>%
filter(COMPOUND_NAME %in% first_active_histo$COMPOUND_NAME)
head(first_active_gex)
allgenes=first_active_gex%>%separate(node_id, sep='___', into=c('gene', 'direction'))
allgenes=unique(allgenes$gene)
write.csv(allgenes, '../../processed_data/TGGate/gex_histo_DEGs.csv')
df_min_oi=df_min[allgenes, allgenes]
pheatmap(df_min)
t
sum
sum=as.data.frame(table(tree))
setwd("~/Documents/GitHub/CAMDA-DILI/Machine_Learning/code")
cv_mclcnc<-read.csv('~/Downloads/OneDrive_1_12-11-2020/MCLCNC_cv_scores_GEX_yscr.csv')%>%
separate(splits, sep='\\.csv\\.', into=c('cell', 'modelinfo'))%>%
separate(cell, into=c('cell_line', 'time', 'dose'), sep=', ')%>%
separate(modelinfo, sep='\\.',
into=c('dataset',
'method', 'true_or_y_scrambled_labels_used',
'train_test_split','cv_split'))%>%
mutate(cell_line=str_extract(pattern='[\\d\\w]+', cell_line))%>%
mutate('testset'='LOCO-CV', 'descriptor'='L1000')
unique(cv_mclcnc$dataset)
ts_mclcnc<-read.csv('~/Downloads/OneDrive_1_12-11-2020/MCLCNC_ts_scores_GEX_yscr.csv')%>%
separate(splits, sep='\\.csv\\.', into=c('cell', 'modelinfo'))%>%
separate(cell, into=c('cell_line', 'time', 'dose'), sep=', ')%>%
separate(modelinfo, sep='\\.',
into=c('dataset',
'method', 'true_or_y_scrambled_labels_used',
'train_test_split','cv_split'))%>%
mutate(cell_line=str_extract(pattern='[\\d\\w]+', cell_line))%>%
mutate('testset'='External Test Set', 'descriptor'='L1000')
head(ts_mclcnc)
df_performance<-rbind(cv,ts, cv_mclcnc, ts_mclcnc)%>%
mutate(dose=gsub(dose,pattern='\\.0\\)', replacement = ''))%>%
mutate(condition=ifelse(cell_line=='All_Cell_Lines','All cell lines',paste0(cell_line,' (',time,' h, ', dose,' uM)')))%>%
mutate(condition=factor(condition, levels=unique(c('All cell lines', unique(condition)))))%>%
dplyr::select(condition, balanced_accuracy,dataset,testset,true_or_y_scrambled_labels_used,method)%>%
mutate(balanced_accuracy=as.numeric(balanced_accuracy))
df_performance$dataset_readable=NA
df_performance$dataset_readable[which(df_performance$dataset=='all')]<-'DILIrank'
df_performance$dataset_readable[which(df_performance$dataset=='MCNC')]<-'DILIrank \n (-vLessConcern)'
####Generate figure####
#Convert to factors and assing orders
df_performance$dataset_readable<-factor(df_performance$dataset_readable, levels=c('DILIrank \n (-vLessConcern)','DILIrank','DILIrank \n (+SIDER)'))
df_performance$testset<-factor(df_performance$testset, levels=c('LOCO-CV','External Test Set','FDA Validation Set'))
df_models<-df_performance%>%
filter(true_or_y_scrambled_labels_used ==1)
df_scrambledmedians<-df_performance%>%
filter(true_or_y_scrambled_labels_used !=1)%>%
group_by(condition, dataset, testset, dataset_readable, method)%>%summarise("median_balacc"=median(balanced_accuracy, na.rm=T))%>%mutate('scrambled'="Scrambled performance")
df_standardmeans<-df_performance%>%
filter(true_or_y_scrambled_labels_used ==1)%>%
group_by(condition, dataset, testset, dataset_readable, method)%>%summarise("median_balacc"=mean(balanced_accuracy, na.rm=T))%>%mutate('mean'="Mean performance")
df_allmedians<-df_performance%>%
filter(true_or_y_scrambled_labels_used ==1)%>%
group_by(true_or_y_scrambled_labels_used, condition, dataset, testset, dataset_readable, method)%>%summarise("median_balacc"=median(balanced_accuracy, na.rm=T))
View(df_allmedians)
write.csv(df_allmedians, '../data/LOOCV_Results/median_performance_gex.csv')
gg_gex<- ggplot(data = df_models,aes(x=dataset, y=as.numeric(balanced_accuracy ))) +
geom_boxplot(data = df_models, aes(fill=condition))+
geom_point(data=df_scrambledmedians,
aes(y=median_balacc,fill=condition, shape=scrambled, group=condition),
position=position_dodge(width=0.75), size=2)+
geom_point(data=df_standardmeans,
aes(y=median_balacc,fill=condition,  shape=mean, group=condition),
position=position_dodge(width=0.75), size=2)+
scale_shape_manual(values=c(23,24))+
scale_fill_viridis_d(option='plasma', begin=0.3, end=1)+
facet_grid(method~testset) + theme_bw()+
ylab("Balanced Accuracy")+
guides(guide_legend(ncol=2))+
theme(text=element_text(size=13), axis.text.x=element_text(angle=60, hjust=1),legend.title = element_blank(), axis.title.x = element_blank())
gg_gex
gg_gex<- ggplot(data = df_models,aes(x=dataset_readable, y=as.numeric(balanced_accuracy ))) +
geom_boxplot(data = df_models, aes(fill=condition))+
geom_point(data=df_scrambledmedians,
aes(y=median_balacc,fill=condition, shape=scrambled, group=condition),
position=position_dodge(width=0.75), size=2)+
geom_point(data=df_standardmeans,
aes(y=median_balacc,fill=condition,  shape=mean, group=condition),
position=position_dodge(width=0.75), size=2)+
scale_shape_manual(values=c(23,24))+
scale_fill_viridis_d(option='plasma', begin=0.3, end=1)+
facet_grid(method~testset) + theme_bw()+
ylab("Balanced Accuracy")+
guides(guide_legend(ncol=2))+
theme(text=element_text(size=13), axis.text.x=element_text(angle=60, hjust=1),legend.title = element_blank(), axis.title.x = element_blank())
gg_gex
ggsave(gg_gex,filename = '../plots/gex_performance.pdf', height = 250, width=300, units="mm")
ggsave(gg_gex,filename = '../plots/gex_performance.jpeg', height = 250, width=300, units="mm")
gg_gex<- ggplot(data = df_models,aes(x=dataset_readable, y=as.numeric(balanced_accuracy ))) +
geom_boxplot(data = df_models, aes(fill=condition))+
geom_point(data=df_scrambledmedians,
aes(y=median_balacc,fill=condition, shape=scrambled, group=condition),
position=position_dodge(width=0.75), size=2)+
geom_point(data=df_standardmeans,
aes(y=median_balacc,fill=condition,  shape=mean, group=condition),
position=position_dodge(width=0.75), size=2)+
scale_shape_manual(values=c(23,24))+
scale_fill_viridis_d(option='plasma', begin=0.3, end=1)+
facet_grid(method~testset) + theme_bw()+
ylab("Balanced Accuracy")+
guides(guide_legend(ncol=2))+
theme(text=element_text(size=13),
#axis.text.x=element_text(angle=60, hjust=1),
legend.title = element_blank(), axis.title.x = element_blank())
gg_gex
ggsave(gg_gex,filename = '../plots/gex_performance.pdf', height = 230, width=280, units="mm")
ggsave(gg_gex,filename = '../plots/gex_performance.pdf', height = 200, width=230, units="mm")
gg_gex<- ggplot(data = df_models,aes(x=dataset_readable, y=as.numeric(balanced_accuracy ))) +
geom_boxplot(data = df_models, aes(fill=condition))+
geom_point(data=df_scrambledmedians,
aes(y=median_balacc,fill=condition, shape=scrambled, group=condition),
position=position_dodge(width=0.75), size=2)+
geom_point(data=df_standardmeans,
aes(y=median_balacc,fill=condition,  shape=mean, group=condition),
position=position_dodge(width=0.75), size=2)+
scale_shape_manual(values=c(23,24))+
scale_fill_viridis_d(option='plasma', begin=0.3, end=1)+
facet_grid(method~testset) + theme_bw()+
ylab("Balanced Accuracy")+
guides(guide_legend(ncol=2))+
theme(text=element_text(size=13),
#axis.text.x=element_text(angle=60, hjust=1),
legend.title = element_blank(), axis.title.x = element_blank())
ggsave(gg_gex,filename = '../plots/gex_performance.pdf', height = 200, width=230, units="mm")
ggsave(gg_gex,filename = '../plots/gex_performance.jpeg', height = 250, width=300, units="mm")
ggsave(gg_gex,filename = '../plots/gex_performance.jpeg',height = 200, width=230, units="mm")
ggsave(gg_gex,filename = '../plots/gex_performance.pdf', height = 200, width=250, units="mm")
ggsave(gg_gex,filename = '../plots/gex_performance.jpeg',height = 200, width=250, units="mm")
df_performance%>%group_by(method, dataset)%>%summarise(n=n())
df_performance%>%group_by(method, dataset, testset)%>%summarise(n=n())
df_performance%>%group_by(method, dataset, testset, cell_line)%>%summarise(n=n())
df_performance%>%group_by(method, dataset, testset, condition)%>%summarise(n=n())
t=df_performance%>%group_by(method, dataset, testset, condition)%>%summarise(n=n())
View(t)
head(ts)
head(dfdf_allmedians)
head(df_models)
df_performance<-rbind(cv,ts, cv_mclcnc, ts_mclcnc)%>%
mutate(dose=gsub(dose,pattern='\\.0\\)', replacement = ''))%>%
mutate(condition=ifelse(cell_line=='All_Cell_Lines','All cell lines',paste0(cell_line,' (',time,' h, ', dose,' uM)')))%>%
mutate(condition=factor(condition, levels=unique(c('All cell lines', unique(condition)))))%>%
dplyr::select(condition, precision,dataset,testset,true_or_y_scrambled_labels_used,method)%>%
mutate(balanced_accuracy=as.numeric(balanced_accuracy))
df_performance<-rbind(cv,ts, cv_mclcnc, ts_mclcnc)%>%
mutate(dose=gsub(dose,pattern='\\.0\\)', replacement = ''))%>%
mutate(condition=ifelse(cell_line=='All_Cell_Lines','All cell lines',paste0(cell_line,' (',time,' h, ', dose,' uM)')))%>%
mutate(condition=factor(condition, levels=unique(c('All cell lines', unique(condition)))))%>%
dplyr::select(condition, precision,dataset,testset,true_or_y_scrambled_labels_used,method)%>%
mutate(precision=as.numeric(precision))
df_performance$dataset_readable=NA
df_performance$dataset_readable[which(df_performance$dataset=='all')]<-'DILIrank'
df_performance$dataset_readable[which(df_performance$dataset=='MCNC')]<-'DILIrank \n (-vLessConcern)'
####Generate figure####
#Convert to factors and assing orders
df_performance$dataset_readable<-factor(df_performance$dataset_readable, levels=c('DILIrank \n (-vLessConcern)','DILIrank','DILIrank \n (+SIDER)'))
df_performance$testset<-factor(df_performance$testset, levels=c('LOCO-CV','External Test Set','FDA Validation Set'))
df_models<-df_performance%>%
filter(true_or_y_scrambled_labels_used ==1)
df_standardmeans<-df_performance%>%
filter(true_or_y_scrambled_labels_used ==1)%>%
group_by(condition, dataset, testset, dataset_readable, method)%>%summarise("median_balacc"=mean(precision, na.rm=T))%>%mutate('mean'="Mean performance")
gg_gex<- ggplot(data = df_models,aes(x=dataset_readable, y=as.numeric(precision ))) +
geom_boxplot(data = df_models, aes(fill=condition))+
geom_point(data=df_scrambledmedians,
aes(y=median_balacc,fill=condition, shape=scrambled, group=condition),
position=position_dodge(width=0.75), size=2)+
geom_point(data=df_standardmeans,
aes(y=median_balacc,fill=condition,  shape=mean, group=condition),
position=position_dodge(width=0.75), size=2)+
scale_shape_manual(values=c(23,24))+
scale_fill_viridis_d(option='plasma', begin=0.3, end=1)+
facet_grid(method~testset) + theme_bw()+
ylab("Balanced Accuracy")+
guides(guide_legend(ncol=2))+
theme(text=element_text(size=13),
#axis.text.x=element_text(angle=60, hjust=1),
legend.title = element_blank(), axis.title.x = element_blank())
gg_gex
ggsave(gg_gex,filename = '../plots/gex_performance_precision.pdf', height = 200, width=250, units="mm")
gg_gex<- ggplot(data = df_models,aes(x=dataset_readable, y=as.numeric(recall ))) +
geom_boxplot(data = df_models, aes(fill=condition))+
geom_point(data=df_scrambledmedians,
aes(y=median_balacc,fill=condition, shape=scrambled, group=condition),
position=position_dodge(width=0.75), size=2)+
geom_point(data=df_standardmeans,
aes(y=median_balacc,fill=condition,  shape=mean, group=condition),
position=position_dodge(width=0.75), size=2)+
scale_shape_manual(values=c(23,24))+
scale_fill_viridis_d(option='plasma', begin=0.3, end=1)+
facet_grid(method~testset) + theme_bw()+
ylab("precision")+
guides(guide_legend(ncol=2))+
theme(text=element_text(size=13),
#axis.text.x=element_text(angle=60, hjust=1),
legend.title = element_blank(), axis.title.x = element_blank())
ggsave(gg_gex,filename = '../plots/gex_performance_recall.pdf', height = 200, width=250, units="mm")
gg_gex<- ggplot(data = df_models,aes(x=dataset_readable, y=as.numeric(precision ))) +
geom_boxplot(data = df_models, aes(fill=condition))+
geom_point(data=df_scrambledmedians,
aes(y=median_balacc,fill=condition, shape=scrambled, group=condition),
position=position_dodge(width=0.75), size=2)+
geom_point(data=df_standardmeans,
aes(y=median_balacc,fill=condition,  shape=mean, group=condition),
position=position_dodge(width=0.75), size=2)+
scale_shape_manual(values=c(23,24))+
scale_fill_viridis_d(option='plasma', begin=0.3, end=1)+
facet_grid(method~testset) + theme_bw()+
ylab("precision")+
guides(guide_legend(ncol=2))+
theme(text=element_text(size=13),
#axis.text.x=element_text(angle=60, hjust=1),
legend.title = element_blank(), axis.title.x = element_blank())
ggsave(gg_gex,filename = '../plots/gex_performance_precision.pdf', height = 200, width=250, units="mm")
df_performance<-rbind(cv,ts, cv_mclcnc, ts_mclcnc)%>%
mutate(dose=gsub(dose,pattern='\\.0\\)', replacement = ''))%>%
mutate(condition=ifelse(cell_line=='All_Cell_Lines','All cell lines',paste0(cell_line,' (',time,' h, ', dose,' uM)')))%>%
mutate(condition=factor(condition, levels=unique(c('All cell lines', unique(condition)))))%>%
dplyr::select(condition, recall,dataset,testset,true_or_y_scrambled_labels_used,method)%>%
mutate(recall=as.numeric(recall))
df_performance$dataset_readable=NA
df_performance$dataset_readable[which(df_performance$dataset=='all')]<-'DILIrank'
df_performance$dataset_readable[which(df_performance$dataset=='MCNC')]<-'DILIrank \n (-vLessConcern)'
####Generate figure####
#Convert to factors and assing orders
df_performance$dataset_readable<-factor(df_performance$dataset_readable, levels=c('DILIrank \n (-vLessConcern)','DILIrank','DILIrank \n (+SIDER)'))
df_performance$testset<-factor(df_performance$testset, levels=c('LOCO-CV','External Test Set','FDA Validation Set'))
df_models<-df_performance%>%
filter(true_or_y_scrambled_labels_used ==1)
df_scrambledmedians<-df_performance%>%
filter(true_or_y_scrambled_labels_used !=1)%>%
group_by(condition, dataset, testset, dataset_readable, method)%>%summarise("median_balacc"=median(recall, na.rm=T))%>%mutate('scrambled'="Scrambled performance")
df_standardmeans<-df_performance%>%
filter(true_or_y_scrambled_labels_used ==1)%>%
group_by(condition, dataset, testset, dataset_readable, method)%>%summarise("median_balacc"=mean(recall, na.rm=T))%>%mutate('mean'="Mean performance")
df_allmedians<-df_performance%>%
filter(true_or_y_scrambled_labels_used ==1)%>%
group_by(true_or_y_scrambled_labels_used, condition, dataset, testset, dataset_readable, method)%>%summarise("median_balacc"=median(balanced_accuracy, na.rm=T))
gg_gex<- ggplot(data = df_models,aes(x=dataset_readable, y=as.numeric(recall ))) +
geom_boxplot(data = df_models, aes(fill=condition))+
geom_point(data=df_scrambledmedians,
aes(y=median_balacc,fill=condition, shape=scrambled, group=condition),
position=position_dodge(width=0.75), size=2)+
geom_point(data=df_standardmeans,
aes(y=median_balacc,fill=condition,  shape=mean, group=condition),
position=position_dodge(width=0.75), size=2)+
scale_shape_manual(values=c(23,24))+
scale_fill_viridis_d(option='plasma', begin=0.3, end=1)+
facet_grid(method~testset) + theme_bw()+
ylab("recall")+
guides(guide_legend(ncol=2))+
theme(text=element_text(size=13),
#axis.text.x=element_text(angle=60, hjust=1),
legend.title = element_blank(), axis.title.x = element_blank())
gg_gex
ggsave(gg_gex,filename = '../plots/gex_performance_recall.pdf', height = 200, width=250, units="mm")
head(ts)
