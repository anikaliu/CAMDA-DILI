t<-setdiff(colnames(df_enrichment),c('ID', 'Description'))
t_select<-t[which(as.numeric(t)%%0.02==0)]
significant<-df_enrichment[,which(!(colnames(df_enrichment)%in% t_select))]
significant<-significant%>%filter(rowMins(as.matrix(df_enrichment%>%dplyr::select(-ID, -Description)), na.rm=T)<0.05)
if(nrow(significant)>2){
p_sig<-significant%>%column_to_rownames('Description')%>%dplyr::select(-ID)
p_sig<-p_sig[,which(colMins(as.matrix(p_sig), na.rm=T)<0.05)] #A lot of columns without any significant result!
p_sig<-p_sig[which(rowMins(as.matrix(p_sig), na.rm=T)<0.05),] #A
pheatmap<-pheatmap((-log10(p_sig)),
cluster_cols=F,
show_rownames=T,
na_col='white',
fontsize=13,
color =  c('grey',(colorRampPalette((brewer.pal(n = 7, name =
"YlOrRd")))(100))),
breaks = c(0,seq(-log10(0.05),-log10(min(p_sig, na.rm=T)),by=((-log10(min(p_sig, na.rm = T))+log10(0.05))/100))))
ggsave(pheatmap, filename=paste0('../plots/enrichment_',name,'.pdf'), height = 15, width = 11)
}
gene_oi=df_plotting$Uniprot[which(abs(df_plotting[,which(colnames(df_plotting)=='RF_mcnc')])>0.0018& wilcox<0.05)]
x_RF <- enrichPathway(gene=as.character(unique(df_plotting$entrez[which(df_plotting$Uniprot %in% gene_oi)])),pvalueCutoff=0.05,organism='human', pAdjustMethod = 'fdr', readable=T, universe = as.character(unique(df_plotting$entrez)),minGSSize = 10)
r_RF<-x_RF@result%>%filter(p.adjust<0.05)%>%select(Description, geneID, p.adjust)%>%separate_rows(geneID, sep='/')%>%mutate('Method'='RF')
gene_oi=df_plotting$Uniprot[which(abs(df_plotting[,which(colnames(df_plotting)=='RF_mcnc')])>0.0018& wilcox<0.05)]
x_RF <- enrichPathway(gene=as.character(unique(df_plotting$entrez[which(df_plotting$Uniprot %in% gene_oi)])),pvalueCutoff=0.05,organism='human', pAdjustMethod = 'fdr', readable=T, universe = as.character(unique(df_plotting$entrez)),minGSSize = 10)
r_RF<-x_RF@result%>%filter(p.adjust<0.05)%>%dplyr::select(Description, geneID, p.adjust)%>%separate_rows(geneID, sep='/')%>%mutate('Method'='RF')
gene_oi=df_plotting$Uniprot[which(abs(df_plotting[,which(colnames(df_plotting)=='SVM_mcnc')])>0.23& wilcox<0.05)]
x_SVM <- enrichPathway(gene=as.character(unique(df_plotting$entrez[which(df_plotting$Uniprot %in% gene_oi)])),pvalueCutoff=0.05,organism='human', pAdjustMethod = 'fdr', readable=T, universe = as.character(unique(df_plotting$entrez)),minGSSize = 10)
r_SVM<-x_SVM@result%>%filter(p.adjust<0.05)%>%dplyr::select(Description, geneID, p.adjust)%>%separate_rows(geneID, sep='/')%>%mutate('Method'='SVM')
r3<-rbind(r_RF,r_SVM)
write.csv(r3, '../data/topinteractions.csv', quote = F)
nodes_pathways<-data.frame('nodes'=unique(r3$Description))
nodes_pathways$method<-ifelse(nodes_pathways$nodes %in% r$Description,
ifelse(nodes_pathways$nodes %in% r2$Description, 'SVM|RF', 'RF'),
'SVM')
nodes_pathways$method<-ifelse(nodes_pathways$nodes %in% r_RF$Description,
ifelse(nodes_pathways$nodes %in% r_SVM$Description, 'SVM|RF', 'RF'),
'SVM')
nodes_pathways$gene_annot<-'0'
nodes<-data.frame('nodes'=unique(r3$geneID))
nodes$gene_annot<-ifelse(nodes$nodes %in% r$geneID,
ifelse(nodes$nodes %in% r2$geneID, 'SVM|RF', 'RF'),
'SVM')
head(nodes_pathways)
gene_oi=df_plotting$Uniprot[which(abs(df_plotting[,which(colnames(df_plotting)=='RF_mcnc')])>0.0018& wilcox<0.05)]
x_RF <- enrichPathway(gene=as.character(unique(df_plotting$entrez[which(df_plotting$Uniprot %in% gene_oi)])),pvalueCutoff=0.05,organism='human', pAdjustMethod = 'fdr', readable=T, universe = as.character(unique(df_plotting$entrez)),minGSSize = 10)
r_RF<-x_RF@result%>%filter(p.adjust<0.05)%>%dplyr::select(Description, geneID, p.adjust)%>%separate_rows(geneID, sep='/')%>%mutate('Method'='RF')
gene_oi=df_plotting$Uniprot[which(abs(df_plotting[,which(colnames(df_plotting)=='SVM_mcnc')])>0.23& wilcox<0.05)]
x_SVM <- enrichPathway(gene=as.character(unique(df_plotting$entrez[which(df_plotting$Uniprot %in% gene_oi)])),pvalueCutoff=0.05,organism='human', pAdjustMethod = 'fdr', readable=T, universe = as.character(unique(df_plotting$entrez)),minGSSize = 10)
r_SVM<-x_SVM@result%>%filter(p.adjust<0.05)%>%dplyr::select(Description, geneID, p.adjust)%>%separate_rows(geneID, sep='/')%>%mutate('Method'='SVM')
r3<-rbind(r_RF,r_SVM)
write.csv(r3, '../data/topinteractions_cytoscape.csv', quote = F)
nodes_pathways<-data.frame('nodes'=unique(r3$Description))
nodes_pathways$pathway_annot<-ifelse(nodes_pathways$nodes %in% r_RF$Description,
ifelse(nodes_pathways$nodes %in% r_SVM$Description, 'SVM|RF', 'RF'),
'SVM')
nodes_genes<-data.frame('nodes'=unique(r3$geneID))
nodes_genes$gene_annot<-ifelse(nodes_genes$nodes %in% r_RF$geneID,
ifelse(nodes_genes$nodes %in% r_SVM$geneID, 'SVM|RF', 'RF'),
'SVM')
nodes<-full_join(nodes_genes,nodes_pathways)
write.csv(nodes, '../data/topnodes_cytoscape.csv', quote = F)
head(results_nodes)
results_nodes<-rbind(r_RF,r_SVM)
head(results_nodes)
r3<-full_join((r_RF,r_SVM, by='Description')
r3<-full_join(r_RF,r_SVM, by='Description')
head(r3)
head(results_nodes)
r_RF<-x_RF@result%>%filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('RF'='X')
r_SVM<-x_SVM@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('SVM'='X')
r3<-full_join(r_RF,r_SVM, by='Description')
write.csv(r3, '../data/SI_table_pathways.csv', quote = F)
head(df_featimp)
summary(df_featimp%>%column_to_rownames(Uniprot))
summary(df_featimp%>%column_to_rownames('Uniprot'))
quantile(df_featimp)
percent_rank(df_featimp$RF_mcnc)
quantile(df_featimp$RF_mcnc)
quantile(df_featimp$RF_mcnc, probs=c(0.75,0.9))
quantile(df_featimp$RF_mcnc, probs=c(0.75,0.96))
quantile(df_featimp$RF_mcnc, probs=c(0.75,0.95))
quantile(df_featimp$RF_mcnc, probs=c(0.75,0.98))
quantile(df_featimp$RF_mcnc, probs=c(0.75,1))
quantile(df_featimp$RF_mcnc, probs=c(0.75,0.99))
quantile(df_featimp$SVM_mcnc, probs=c(0.75,0.99))
quantile(df_featimp$SVM_mcnc, probs=c(0.75,0.98))
quantile(df_featimp$RF_mcnc, probs=c(0.75,0.98))
quantile(df_featimp$RF_mcnc, probs=c(0.75,0.97))
quantile(df_featimp$SVM_mcnc, probs=c(0.75,0.97))
quantile(df_featimp$SVM_mcnc, probs=c(0.75,0.99))
quantile(df_featimp$SVM_mcnc, probs=c(0.75,0.96))
quantile(df_featimp$RF_mcnc, probs=c(0.75,0.96))
quantile(df_featimp$RF_mcnc, probs=c(0.75,0.96.5))
quantile(df_featimp$SVM_mcnc, probs=c(0.75,0.96))
for(index in 2:ncol(df2)){
df_enrichment<-data.frame()
name<-colnames(df2)[index]
print(name)
if (str_detect(name, pattern='SVM')){screenlist<-seq(0.07,0.5,0.01)}
if (str_detect(name, pattern='RF')){screenlist<-seq(0.0007,0.004,0.0001)}
if (str_detect(name, pattern='mclcnc')){wilcox<-df_plotting$mclcnc}
if (str_detect(name, pattern='mcnc')){wilcox<-df_plotting$mcnc}
if (str_detect(name, pattern='mclcnc')){wilcox<-df_plotting$mcnc}
for (t in screenlist) {
gene_oi=df_plotting$Uniprot[which(abs(df_plotting[,which(colnames(df_plotting)==name)])>t& wilcox<0.05)]
if(length(gene_oi)>0){
x <- enrichPathway(gene=as.character(unique(df_plotting$entrez[which(df_plotting$Uniprot %in% gene_oi)])),pvalueCutoff=0.05,organism='human', pAdjustMethod = 'fdr', readable=T, universe = as.character(unique(df_plotting$entrez)),minGSSize = 10)
result<-x@result%>%dplyr::select(ID, p.adjust,Description)
colnames(result)[which(colnames(result)=='p.adjust')]<-t
if (ncol(df_enrichment)==0){
df_enrichment<-result
}else{
df_enrichment<-full_join(df_enrichment, result)
}
}
}
write.csv(df_enrichment, paste0('../data/enrichment/',name,'.csv'), row.names = F)
}
for(index in 2:ncol(df_featimp)){
df_enrichment<-data.frame()
name<-colnames(df_featimp)[index]
print(name)
if (str_detect(name, pattern='SVM')){screenlist<-seq(0.07,0.5,0.01)}
if (str_detect(name, pattern='RF')){screenlist<-seq(0.0007,0.004,0.0001)}
if (str_detect(name, pattern='mclcnc')){wilcox<-df_plotting$mclcnc}
if (str_detect(name, pattern='mcnc')){wilcox<-df_plotting$mcnc}
if (str_detect(name, pattern='mclcnc')){wilcox<-df_plotting$mcnc}
for (t in screenlist) {
gene_oi=df_plotting$Uniprot[which(abs(df_plotting[,which(colnames(df_plotting)==name)])>t& wilcox<0.05)]
if(length(gene_oi)>0){
x <- enrichPathway(gene=as.character(unique(df_plotting$entrez[which(df_plotting$Uniprot %in% gene_oi)])),pvalueCutoff=0.05,organism='human', pAdjustMethod = 'fdr', readable=T, universe = as.character(unique(df_plotting$entrez)),minGSSize = 10)
result<-x@result%>%dplyr::select(ID, p.adjust,Description)
colnames(result)[which(colnames(result)=='p.adjust')]<-t
if (ncol(df_enrichment)==0){
df_enrichment<-result
}else{
df_enrichment<-full_join(df_enrichment, result)
}
}
}
write.csv(df_enrichment, paste0('../data/enrichment/',name,'.csv'), row.names = F)
}
#RF_mcnc
for (index in 2:7){
name<-colnames(df_featimp)[index]
df_enrichment<-read.csv(paste0('../data/enrichment_',name,'.csv'), check.names = F)
t<-setdiff(colnames(df_enrichment),c('ID', 'Description'))
t_select<-t[which(as.numeric(t)%%0.02==0)]
significant<-df_enrichment[,which(!(colnames(df_enrichment)%in% t_select))]
significant<-significant%>%filter(rowMins(as.matrix(df_enrichment%>%dplyr::select(-ID, -Description)), na.rm=T)<0.05)
if(nrow(significant)>2){
p_sig<-significant%>%column_to_rownames('Description')%>%dplyr::select(-ID)
p_sig<-p_sig[,which(colMins(as.matrix(p_sig), na.rm=T)<0.05)] #A lot of columns without any significant result!
p_sig<-p_sig[which(rowMins(as.matrix(p_sig), na.rm=T)<0.05),] #A
pheatmap<-pheatmap((-log10(p_sig)),
cluster_cols=F,
show_rownames=T,
na_col='white',
fontsize=13,
color =  c('grey',(colorRampPalette((brewer.pal(n = 7, name =
"YlOrRd")))(100))),
breaks = c(0,seq(-log10(0.05),-log10(min(p_sig, na.rm=T)),by=((-log10(min(p_sig, na.rm = T))+log10(0.05))/100))))
ggsave(pheatmap, filename=paste0('../plots/enrichment_',name,'.pdf'), height = 15, width = 11)
}
}
#RF_mcnc
for (index in 2:7){
name<-colnames(df_featimp)[index]
df_enrichment<-read.csv(paste0('../data/enrichment_',name,'.csv'), check.names = F)
t<-setdiff(colnames(df_enrichment),c('ID', 'Description'))
t_select<-t[which(as.numeric(t)%%0.02==0)]
significant<-df_enrichment[,which(!(colnames(df_enrichment)%in% t_select))]
significant<-significant%>%filter(rowMins(as.matrix(df_enrichment%>%dplyr::select(-ID, -Description)), na.rm=T)<0.05)
if(nrow(significant)>2){
p_sig<-significant%>%column_to_rownames('Description')%>%dplyr::select(-ID)
p_sig<-p_sig[,which(colMins(as.matrix(p_sig), na.rm=T)<0.05)] #A lot of columns without any significant result!
p_sig<-p_sig[which(rowMins(as.matrix(p_sig), na.rm=T)<0.05),] #A
pheatmap<-pheatmap((-log10(p_sig)),
cluster_cols=F,
show_rownames=T,
na_col='white',
fontsize=13,
color =  c('grey',(colorRampPalette((brewer.pal(n = 7, name =
"YlOrRd")))(100))),
breaks = c(0,seq(-log10(0.05),-log10(min(p_sig, na.rm=T)),by=((-log10(min(p_sig, na.rm = T))+log10(0.05))/100))))
ggsave(pheatmap, filename=paste0('../plots/enrichment_',name,'.pdf'), height = 15, width = 11)
}
}
r_RF<-x_RF@result%>%filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('RF'='X')
r_SVM<-x_SVM@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('SVM'='X')
r3<-full_join(r_RF,r_SVM, by='Description')
head(r3)
head(r_SVM
)
#Prepare for SI table
r_RF<-x_RF@result%>%filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('RF_padj'=p.adjust)%>%
mutate('RF'='X')%>%
mutate('RF_GeneRatio'=GeneRatio)%>%
r_SVM<-x_SVM@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('SVM_padj'=p.adjust)%>%
mutate('SVM'='X')%>%
mutate('SVM_GeneRatio'=GeneRatio)%>%
select(ID,Description)
head(r_RF)
#Prepare for SI table
r_RF<-x_RF@result%>%filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('RF_padj'=p.adjust)%>%
mutate('RF'='X')%>%
mutate('RF_GeneRatio'=GeneRatio)%>%
dplyr::select(-GenRatio, -BgRatio, -p.adjust)
#Prepare for SI table
r_RF<-x_RF@result%>%filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('RF_padj'=p.adjust)%>%
mutate('RF'='X')%>%
mutate('RF_GeneRatio'=GeneRatio)%>%
dplyr::select(-GeneRatio, -BgRatio, -p.adjust)
r_SVM<-x_SVM@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('SVM_padj'=p.adjust)%>%
mutate('SVM'='X')%>%
mutate('SVM_GeneRatio'=GeneRatio)%>%
dplyr::select(-GeneRatio, -BgRatio, -p.adjust)
head(r_SVM)
#Prepare for SI table
r_RF<-x_RF@result%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('RF_padj'=p.adjust)%>%
mutate('RF'='X')%>%
mutate('RF_GeneRatio'=GeneRatio)%>%
dplyr::select(-GeneRatio, -BgRatio, -p.adjust)
r_SVM<-x_SVM@result%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('SVM_padj'=p.adjust)%>%
mutate('SVM'='X')%>%
mutate('SVM_GeneRatio'=GeneRatio)%>%
dplyr::select(-GeneRatio, -BgRatio, -p.adjust)
#Prepare for SI table
r_RF<-x_RF@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('RF_padj'=p.adjust)%>%
mutate('RF'='X')%>%
mutate('RF_GeneRatio'=GeneRatio)%>%
dplyr::select(-GeneRatio, -BgRatio, -p.adjust)
r_SVM<-x_SVM@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('SVM_padj'=p.adjust)%>%
mutate('SVM'='X')%>%
mutate('SVM_GeneRatio'=GeneRatio)%>%
dplyr::select(-GeneRatio, -BgRatio, -p.adjust)
r3<-full_join(r_RF,r_SVM, by='Description')
write.csv(r3, '../data/SI_table_pathways.csv', quote = F)
head(r3)
r3<-full_join(r_RF,r_SVM, by=c('Description','ID'))
head(r3)
#Prepare for SI table
r_RF<-x_RF@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('RF_padj'=p.adjust)%>%
mutate('RF_GeneRatio'=GeneRatio)%>%
dplyr::select(-GeneRatio, -BgRatio, -p.adjust)
r_SVM<-x_SVM@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('SVM_padj'=p.adjust)%>%
mutate('SVM_GeneRatio'=GeneRatio)%>%
dplyr::select(-GeneRatio, -BgRatio, -p.adjust)
r3<-full_join(r_RF,r_SVM, by=c('Description','ID'))
write.csv(r3, '../data/SI_table_pathways.csv', quote = F)
heaD(r3)
head(r3)
write.csv(r3, '../data/SI_table_pathways.csv', quote = F)
write.csv(r3, '../data/SI_table_pathways.csv', quote = F)
0.007
0.0007
#RF_mcnc
for (index in 2:7){
name<-colnames(df_featimp)[index]
df_enrichment<-read.csv(paste0('../data/enrichment_',name,'.csv'), check.names = F)
t<-setdiff(colnames(df_enrichment),c('ID', 'Description'))
t_select<-t[which(as.numeric(t)%%0.02==0)]
significant<-df_enrichment[,which(!(colnames(df_enrichment)%in% t_select))]
significant<-significant%>%filter(rowMins(as.matrix(df_enrichment%>%dplyr::select(-ID, -Description)), na.rm=T)<0.05)
if(nrow(significant)>2){
p_sig<-significant%>%column_to_rownames('Description')%>%dplyr::select(-ID)
p_sig<-p_sig[,which(colMins(as.matrix(p_sig), na.rm=T)<0.05)] #A lot of columns without any significant result!
p_sig<-p_sig[which(rowMins(as.matrix(p_sig), na.rm=T)<0.05),] #A
pheatmap<-pheatmap((-log10(p_sig)),
cluster_cols=F,
show_rownames=T,
na_col='white',
fontsize=13,
color =  c('grey',(colorRampPalette((brewer.pal(n = 7, name =
"YlOrRd")))(100))),
breaks = c(0,seq(-log10(0.05),-log10(min(p_sig, na.rm=T)),by=((-log10(min(p_sig, na.rm = T))+log10(0.05))/100))))
ggsave(pheatmap, filename=paste0('../plots/enrichment_',name,'.pdf'), height = 15, width = 11)
}
}
#RF_mcnc
for (index in 2:7){
name<-colnames(df_featimp)[index]
df_enrichment<-read.csv(paste0('../data/enrichment/',name,'.csv'), check.names = F)
t<-setdiff(colnames(df_enrichment),c('ID', 'Description'))
t_select<-t[which(as.numeric(t)%%0.02==0)]
significant<-df_enrichment[,which(!(colnames(df_enrichment)%in% t_select))]
significant<-significant%>%filter(rowMins(as.matrix(df_enrichment%>%dplyr::select(-ID, -Description)), na.rm=T)<0.05)
if(nrow(significant)>2){
p_sig<-significant%>%column_to_rownames('Description')%>%dplyr::select(-ID)
p_sig<-p_sig[,which(colMins(as.matrix(p_sig), na.rm=T)<0.05)] #A lot of columns without any significant result!
p_sig<-p_sig[which(rowMins(as.matrix(p_sig), na.rm=T)<0.05),] #A
pheatmap<-pheatmap((-log10(p_sig)),
cluster_cols=F,
show_rownames=T,
na_col='white',
fontsize=13,
color =  c('grey',(colorRampPalette((brewer.pal(n = 7, name =
"YlOrRd")))(100))),
breaks = c(0,seq(-log10(0.05),-log10(min(p_sig, na.rm=T)),by=((-log10(min(p_sig, na.rm = T))+log10(0.05))/100))))
ggsave(pheatmap, filename=paste0('../plots/enrichment_',name,'.pdf'), height = 15, width = 11)
}
}
index=2
name<-colnames(df_featimp)[index]
df_enrichment<-read.csv(paste0('../data/enrichment/',name,'.csv'), check.names = F)
t<-setdiff(colnames(df_enrichment),c('ID', 'Description'))
t_select<-t[which(as.numeric(t)%%0.02==0)]
significant<-df_enrichment[,which(!(colnames(df_enrichment)%in% t_select))]
significant<-significant%>%filter(rowMins(as.matrix(df_enrichment%>%dplyr::select(-ID, -Description)), na.rm=T)<0.05)
if(nrow(significant)>2){
p_sig<-significant%>%column_to_rownames('Description')%>%dplyr::select(-ID)
p_sig<-p_sig[,which(colMins(as.matrix(p_sig), na.rm=T)<0.05)] #A lot of columns without any significant result!
p_sig<-p_sig[which(rowMins(as.matrix(p_sig), na.rm=T)<0.05),] #A
pheatmap<-pheatmap((-log10(p_sig)),
cluster_cols=F,
show_rownames=T,
na_col='white',
fontsize=13,
color =  c('grey',(colorRampPalette((brewer.pal(n = 7, name =
"YlOrRd")))(100))),
breaks = c(0,seq(-log10(0.05),-log10(min(p_sig, na.rm=T)),by=((-log10(min(p_sig, na.rm = T))+log10(0.05))/100))))
ggsave(pheatmap, filename=paste0('../plots/enrichment_',name,'.pdf'), height = 10, width = 11)
name<-colnames(df_featimp)[index]
name<-colnames(df_featimp)[index]
name<-colnames(df_featimp)[index]
name<-colnames(df_featimp)[index]
name<-colnames(df_featimp)[index]
name<-colnames(df_featimp)[index]
df_enrichment<-read.csv(paste0('../data/enrichment/',name,'.csv'), check.names = F)
t<-setdiff(colnames(df_enrichment),c('ID', 'Description'))
t_select<-t[which(as.numeric(t)%%0.02==0)]
significant<-df_enrichment[,which(!(colnames(df_enrichment)%in% t_select))]
significant<-significant%>%filter(rowMins(as.matrix(df_enrichment%>%dplyr::select(-ID, -Description)), na.rm=T)<0.05)
if(nrow(significant)>2){
p_sig<-significant%>%column_to_rownames('Description')%>%dplyr::select(-ID)
p_sig<-p_sig[,which(colMins(as.matrix(p_sig), na.rm=T)<0.05)] #A lot of columns without any significant result!
p_sig<-p_sig[which(rowMins(as.matrix(p_sig), na.rm=T)<0.05),] #A
pheatmap<-pheatmap((-log10(p_sig)),
cluster_cols=F,
show_rownames=T,
na_col='white',
fontsize=13,
color =  c('grey',(colorRampPalette((brewer.pal(n = 7, name =
"YlOrRd")))(100))),
breaks = c(0,seq(-log10(0.05),-log10(min(p_sig, na.rm=T)),by=((-log10(min(p_sig, na.rm = T))+log10(0.05))/100))))
ggsave(pheatmap, filename=paste0('../plots/enrichment_',name,'.pdf'), height = 10, width = 11)
}
ggsave(pheatmap, filename=paste0('../plots/enrichment_',name,'.pdf'), height = 9, width = 11)
gene_oi=df_plotting$Uniprot[which(abs(df_plotting[,which(colnames(df_plotting)=='RF_mcnc')])>0.0018& wilcox<0.05)]
x_RF <- enrichPathway(gene=as.character(unique(df_plotting$entrez[which(df_plotting$Uniprot %in% gene_oi)])),
pvalueCutoff=0.05,organism='human',
pAdjustMethod = 'fdr',
readable=T,
universe = as.character(unique(df_plotting$entrez)),
minGSSize = 10)
gene_oi=df_plotting$Uniprot[which(abs(df_plotting[,which(colnames(df_plotting)=='SVM_mcnc')])>0.23& wilcox<0.05)]
x_SVM <- enrichPathway(gene=as.character(unique(df_plotting$entrez[which(df_plotting$Uniprot %in% gene_oi)])),
pvalueCutoff=0.05,
organism='human',
pAdjustMethod = 'fdr',
readable=T,
universe = as.character(unique(df_plotting$entrez)),
minGSSize = 10)
#Prepare for cytoscape figure
r_RF<-x_RF@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(Description, geneID, p.adjust)%>%
separate_rows(geneID, sep='/')%>%
mutate('Method'='RF')
r_SVM<-x_SVM@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(Description, geneID, p.adjust)%>%
separate_rows(geneID, sep='/')%>%
mutate('Method'='SVM')
results_nodes<-rbind(r_RF,r_SVM)
write.csv(results_nodes, '../data/enrichment/topinteractions_cytoscape.csv', quote = F)
#Prepare for SI table
r_RF<-x_RF@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('RF_padj'=p.adjust)%>%
mutate('RF_GeneRatio'=GeneRatio)%>%
dplyr::select(-GeneRatio, -BgRatio, -p.adjust)
r_SVM<-x_SVM@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(ID,Description,GeneRatio,BgRatio, p.adjust)%>%
mutate('SVM_padj'=p.adjust)%>%
mutate('SVM_GeneRatio'=GeneRatio)%>%
dplyr::select(-GeneRatio, -BgRatio, -p.adjust)
r3<-full_join(r_RF,r_SVM, by=c('Description','ID'))
write.csv(r3, '../data/enrichment/SI_table_pathways.csv', quote = F)
#Prepare node information for cytoscape
nodes_pathways<-data.frame('nodes'=unique(results_nodes$Description))
nodes_pathways$pathway_annot<-ifelse(nodes_pathways$nodes %in% r_RF$Description,
ifelse(nodes_pathways$nodes %in% r_SVM$Description, 'SVM|RF', 'RF'),
'SVM')
nodes_genes<-data.frame('nodes'=unique(results_nodes$geneID))
nodes_genes$gene_annot<-ifelse(nodes_genes$nodes %in% r_RF$geneID,
ifelse(nodes_genes$nodes %in% r_SVM$geneID, 'SVM|RF', 'RF'),
'SVM')
nodes<-full_join(nodes_genes,nodes_pathways)
write.csv(nodes, '../data/enrichment/topnodes_cytoscape.csv', quote = F)
SI_table<-allfeat%>%filter(RF_mcnc>0.0018|SVM_mcnc>0.23)%>%filter(wilcoxgreat_wilcox_p.adj<0.05)%>%select(Symbol,Name, Protein_Classification, RF_mcnc, SVM_mcnc)
head(allfat)
head(allfeat)
head(df_enrichment)
SI_table<-allfeat%>%inner_join(df_featimp)%>%filter(RF_mcnc>0.0018|SVM_mcnc>0.23)%>%filter(wilcoxgreat_wilcox_p.adj<0.05)%>%select(Symbol,Name, Protein_Classification, RF_mcnc, SVM_mcnc)
SI_table<-allfeat%>%inner_join(df_featimp)%>%filter(RF_mcnc>0.0018|SVM_mcnc>0.23)%>%filter(mcnc<0.05)%>%select(Symbol,Name, Protein_Classification, RF_mcnc, SVM_mcnc)
SI_table<-allfeat%>%inner_join(df_featimp)%>%filter(RF_mcnc>0.0018|SVM_mcnc>0.23)%>%filter(mcnc<0.05)%>%dplyr::select(Symbol,Name, Protein_Classification, RF_mcnc, SVM_mcnc)
head(df_featimp)
head(allfeat)
SI_table<-allfeat%>%inner_join(df_featimp)%>%%>%df_targetinfo%>%filter(RF_mcnc>0.0018|SVM_mcnc>0.23)%>%filter(mcnc<0.05)%>%dplyr::select(Symbol,Name, Protein_Classification, RF_mcnc, SVM_mcnc)
SI_table<-allfeat%>%inner_join(df_featimp)%>%left_join(df_targetinfo)%>%filter(RF_mcnc>0.0018|SVM_mcnc>0.23)%>%filter(mcnc<0.05)%>%dplyr::select(Symbol,Name, Protein_Classification, RF_mcnc, SVM_mcnc)
head(SI_table)
write.csv(SI_table, '../data/enrichment/SI_table_genes.csv', quote = F, row.names = F)
write.csv(annotation, '../data/annotation_gene.csv')
nodes_pathways<-data.frame('nodes'=unique(results_nodes$Description))
nodes_pathways$pathway_annot<-ifelse(nodes_pathways$nodes %in% r_RF$Description,
ifelse(nodes_pathways$nodes %in% r_SVM$Description, 'SVM|RF', 'RF'),
'SVM')
nodes_genes<-data.frame('nodes'=unique(results_nodes$geneID))
nodes_genes$gene_annot<-ifelse(nodes_genes$nodes %in% r_RF$geneID,
ifelse(nodes_genes$nodes %in% r_SVM$geneID, 'SVM|RF', 'RF'),
'SVM')
nodes<-full_join(nodes_genes,nodes_pathways)
head(nodes)
summary(nodes$gene_annot)
table(nodes$gene_annot)
View(NoDILI)
View(r_RF)
View(r_SVM)
#Prepare node information for cytoscape
nodes_pathways<-data.frame('nodes'=unique(results_nodes$Description))
nodes_pathways$pathway_annot<-ifelse(nodes_pathways$nodes %in% r_RF$Description,
ifelse(nodes_pathways$nodes %in% r_SVM$Description, 'SVM|RF', 'RF'),
'SVM')
nodes_genes$gene_annot
#Prepare for cytoscape figure
r_RF<-x_RF@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(Description, geneID, p.adjust)%>%
separate_rows(geneID, sep='/')%>%
mutate('Method'='RF')
r_SVM<-x_SVM@result%>%
filter(p.adjust<0.05)%>%
dplyr::select(Description, geneID, p.adjust)%>%
separate_rows(geneID, sep='/')%>%
mutate('Method'='SVM')
results_nodes<-rbind(r_RF,r_SVM)
#Prepare node information for cytoscape
nodes_pathways<-data.frame('nodes'=unique(results_nodes$Description))
nodes_pathways$pathway_annot<-ifelse(nodes_pathways$nodes %in% r_RF$Description,
ifelse(nodes_pathways$nodes %in% r_SVM$Description, 'SVM|RF', 'RF'),
'SVM')
View(nodes_pathways)
nodes_genes<-data.frame('nodes'=unique(results_nodes$geneID))
nodes_genes$gene_annot<-ifelse(nodes_genes$nodes %in% r_RF$geneID,
ifelse(nodes_genes$nodes %in% r_SVM$geneID, 'SVM|RF', 'RF'),
'SVM')
nodes<-full_join(nodes_genes,nodes_pathways)
write.csv(nodes, '../data/enrichment/topnodes_cytoscape.csv', quote = F)
df_old<-read.csv('~/OneDrive - University of Cambridge/CAMDA/processed_data/target_analysis/SI_tabletargets.csv')
head(df_old)
df_old<-read.csv('~/OneDrive - University of Cambridge/CAMDA/processed_data/target_analysis/SI_tabletargets.csv', check.names = F)
head(SI_table)
setdiff(df_old$`Gene Symbol`, SI_table$Symbol)
setdiff( SI_table$Symbol, df_old$`Gene Symbol`)
View(SI_table)
length(SI_table)
length(SI_table$Symbol)
length(SI_table$Symbol)
length(df_old$`Gene Symbol`)
2101466/14025286
3608817/14025286
6135387/14025286
