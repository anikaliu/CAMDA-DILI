if (!require("BiocManager"))
install.packages("BiocManager")
BiocManager::install("maEndToEnd")
library("Biobase")
mydata<-read.csv("CompletelyRandomPeople.csv")
mydata<-read.csv("/Users/psrw2/OneDrive - University Of Cambridge/Statistics_4_Chemists/DA2 - Basic Data Analysis-20190114/CompletelyRandomPeople.csv")
mydata<-read.csv("CompletelyRandomPeople.csv")
mydata<-read.csv("/Users/psrw2/OneDrive - University Of Cambridge/Statistics_4_Chemists/DA2 - Basic Data Analysis-20190114/CompletelyRandomPeople.csv")
head(mydata)
names(mydata)
colnames(mydata)
rownames(mydata)
nrow(mydata)
ncol(mydata)
attributes(mydata)
summary(mydata)
chickwts <- read.csv("/Users/psrw2/OneDrive - University Of Cambridge/Statistics_4_Chemists/DA2-ChickenData.csv")
chickwts <- read.csv("/Users/psrw2/OneDrive - University Of Cambridge/Statistics_4_Chemists/DA2 - Basic Data Analysis-20190114/DA2-ChickenData.csv")
head(chickwts)
summary(chickwts)
?hist
weight<-chickwts$weight
hist(weight)
hist(weight, breaks=20)
hist(weight, breaks=c(100,175,200,250,300,325,450))
hist(weight, breaks=20, main=”My first histogram”,
xlab=”abscissa”, ylab=”ordinate”)
hist(weight, breaks=20, main=”My first histogram”,xlab=”abscissa”, ylab=”ordinate”)
hist(weight, breaks=20, main=”My first histogram”, xlab=”abscissa”, ylab=”ordinate”)
hist(weight, breaks=20, main='My first histogram', xlab=”abscissa”, ylab=”ordinate”)
hist(weight, breaks=20, main='My first histogram', xlab='abscissa', ylab='ordinate')
hist(weight, breaks=20, main='My first histogram', xlab='weight', ylab='frequency')
hist(weight, breaks=c(100,250,350,450), main='My first histogram', xlab='weight', ylab='frequency')
hist(weight, breaks=c(100,250,300,350,450), main='My first histogram', xlab='weight', ylab='frequency')
boxplot(weight)
boxplot(weight, main = 'Chicken Weights Boxplot')
halfweights<-weight/2
doubleweight<-weight*2
boxplot(weight,halfweight,doubleweight)
boxplot(weight,halfweights,doubleweight)
boxplot(weight,halfweights,doubleweight,names = (standard,half,double))
boxplot(weight,halfweights,doubleweight, names = c(standard,half,double))
boxplot(weight,halfweights,doubleweight, names = c('standard','half','double'))
boxplot(chickwts)
boxplot(weight~feed,data=chickwts)
head(swiss)
agriculture<-swiss$Agriculture
education<-swiss$Education
plot(education,agriculture)
plot(Agriculture~Education,data=swiss)
?plot
plot(Agriculture~Education,data=swiss, main=“Swiss Data”,xlab= “Proportion Educated Beyond Primary'', ylab='Proportion working in Agriculture', pch=19, col='blue', cex=0.75, type='b')
plot(Agriculture~Education,data=swiss, main='Swiss Data',xlab= 'Proportion Educated Beyond Primary', ylab='Proportion working in Agriculture', pch=19, col='blue', cex=0.75, type='b')
swiss[order(swiss$Agriculture),]
plot(Agriculture~Education,data=swiss, main='Swiss Data',xlab= 'Proportion Educated Beyond Primary', ylab='Proportion working in Agriculture', pch=19, col='blue', cex=0.75, type='b')
swiss<-swiss[order(swiss$Agriculture),]
plot(Agriculture~Education,data=swiss, main='Swiss Data',xlab= 'Proportion Educated Beyond Primary', ylab='Proportion working in Agriculture', pch=19, col='blue', cex=0.75, type='b')
View(swiss)
head(swiss)
plot(Agriculture~Education,data=swiss[order(swiss$Education),], main='Swiss Data',xlab= 'Proportion Educated Beyond Primary', ylab='Proportion working in Agriculture', pch=19, col='blue', cex=0.75, type='b')
mean(swiss$Agriculture)
mean(swiss)
var(swiss$Agriculture)
quantile(swiss$Agriculture)
range(swiss$Agriculture)
range(chickwts$weights)
range(chickwts$weight)
apply(swiss,2,quantile)
aggregate(weight~feed,data=chickwts,sd)
aggregate(weight~feed,data=chickwts,mean)
mydata<-read.csv("CompletelyRandomPeople.csv")
mydata<-read.csv("/Users/psrw2/OneDrive - University Of Cambridge/Statistics_4_Chemists/DA2 - Basic Data Analysis-20190114/DA2-ChickenData.csv")
boxplot(weight~feed,data=mydata)
hist(mydata$weight)
hist(mydata$weight, main='Chicken weight vs. Frequency',xlab='weight'
,ylab='Frequency')
print(mean(mydata$weight))
print(aggregate(weight~feed),data=mydata,mean)
head(mydata)
print(aggregate(weight~feed),data=mydata,mean)
print(aggregate(weight~feed,data=mydata,mean))
print(aggregate(call~stimulus,data=mydata,var))
head(mydata)
#
boxplot(interval~stimulus,data=mydata)
head(mydata)
rm(list=ls())
head(mydata)
#head(mydata)
#boxplot(interval~stimulus,data=mydata)
#plot(mydata$duration,mydata$call)
#hist(mydata$call, main='Mating Calls vs. Frequency',xlab='weight'
,ylab='Frequency')
mydata<-read.csv("/Users/psrw2/OneDrive - University Of Cambridge/Statistics_4_Chemists/DA2 - Basic Data Analysis-20190114/DA2-ChickenData.csv")
rm(mydata)
mydata<-read.csv("/Users/psrw2/OneDrive - University Of Cambridge/Statistics_4_Chemists/DA2 - Basic Data Analysis-20190114/Frog_Data.csv")
head(mydata)
boxplot(interval~stimulus,data=mydata)
plot(mydata$duration,mydata$call)
plot(mydata$duration,mydata$call, ylab='Freq Calls',xlab='Call Duration')
hist(mydata$call, main='Mating Calls vs. Frequency',xlab='Call'
,ylab='Frequency')
#head(mydata)
print(aggregate(call~stimulus,data=mydata,var))
print(mean(mydata$interval),mean(mydata$duration),mean(mydata$call))
print(mean(mydata$interval))
print(mean(mydata$call))
dotchart(mydata$duration)
pie(mydata$duration)
stripchart(mydata$duration)
barplot(mydata$duration)
boxplot(mydata$duration,mydata$call)
boxplot(mydata)
source("https://bioconductor.org/biocLite.R")
biocLite("simpleaffy")
library(simpleaffy)
.libPaths()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("simpleaffy", version = "3.8")
install.packages()
install.packages("affy")
install.packages("BoicLite")
BiocManager::install("affy")
BiocManager::install(c("GenomicFeatures", "AnnotationDbi"))
BiocManager::install("XML")
paste0(R.home(), "/library")
R.home()
.libPaths(paste0(R.home(), "/library"))
.libPaths()
BiocManager::install("XML")
.libPaths()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("xps", version = "3.8")
library(xps)
if (!requireNamespace("BiocManager", quietly = TRUE))
+     install.packages("BiocManager")
> BiocManager::install("xps", version = "3.8")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("xps", version = "3.8")
library(xps)
library(affy)
library("xps")
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
if (!requireNamespace("BiocManager"))
install.packages("BiocManager")
BiocManager::install()
setwd("~/OneDrive - University Of Cambridge/CasualR_Toxicogenomics/Renal_Toxicity")
load("/Users/psrw2/OneDrive - University Of Cambridge/CAMBA_Competition/Abdu_Plotting_Scripts_20_12_19/figures_script.RData")
Abdu <- load("/Users/psrw2/OneDrive - University Of Cambridge/CAMBA_Competition/Abdu_Plotting_Scripts_20_12_19/figures_script.RData")
setwd("~/OneDrive - University Of Cambridge/GitHub/CAMDA-DILI/Substructural_Analysis")
setwd(getSrcDirectory()[1])
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read_csv("./Data/Structural_alerts_with_DrugBank.csv")
df <- df[df$p_value <= 0.05, ]
setwd("~/OneDrive - University Of Cambridge/GitHub/CAMDA-DILI/Substructural_Analysis")
df <- read_csv("./Data/Structural_alerts_with_DrugBank.csv")
setwd("~/OneDrive - University Of Cambridge/GitHub/CAMDA-DILI/Substructural_Analysis")
library(tidyverse) # for ggplot2
library(magrittr) # for pipes and %<>%
library(ggpubr) # for theme_pubr()
library(cowplot)
library(ggsci)
df <- read_csv("./Data/Structural_alerts_with_DrugBank.csv")
df <- df[df$p_value <= 0.05, ]
df$Source<-as.factor(df$Source)
levels(df$Source)<-c("Liu et al. (2015) [n=5]", "SARpy [n=11]", "MOSS [n=23]")
original_plot <- ggplot(data = df, mapping = aes(x = PPV, y = perc_hits, color=Source)) +
geom_point(alpha = 0.6, size=1.6) +
xlab("Precision") +
ylab("Compounds with positive DILI labels \n containing the respective substructure (%)")  +
scale_color_futurama()+
xlim(0, 1) +
ylim(0, 100) +
#  scale_color_brewer(palette='Set2')+
theme(legend.position="right") + theme_bw()+ labs(color = "Substructure Source")
original_plot <- original_plot + theme(axis.text = element_text(size = 13))
original_plot <- original_plot + theme(axis.title = element_text(size = 13))
original_plot <- original_plot + theme(legend.text = element_text(size = 13))
original_plot <- original_plot + theme(legend.title = element_text(size = 13))
original_plot
y_box <- axis_canvas(original_plot, axis = "y") +
geom_boxplot(data = df, aes(x=factor(Source),y = perc_hits, color = factor(Source))) +scale_color_futurama()+ scale_x_discrete()
x_box <- axis_canvas(original_plot,axis="x", coord_flip = TRUE) +
geom_boxplot(data=df, aes(y=PPV, x = factor(Source), color = factor(Source))) + scale_color_futurama()+ scale_x_discrete() +coord_flip()
p1 <- insert_xaxis_grob(original_plot,x_box,grid::unit(0.7, "in"),position = "top")
p2 <- insert_yaxis_grob(p1, y_box, grid::unit(0.7, "in"),position = "right")
ggdraw(p2)
ggsave(p2, filename = './Plots/Figure5.jpeg', height = 95, width=170, units="mm")
ggsave(p2, filename = './Plots/Figure5.pdf', height = 95, width=170, units="mm")
#    scale_fill_discrete(name = "Substructure Source", labels = c("MOSS", "SARpy", "Hewitt", "Liu"))
